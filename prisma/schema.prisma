// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id    Int      @id @default(autoincrement())
  username  String  @unique
  email     String  @unique
  name      String
  password   String
  logins     SystemLog[]
  detections FaceDetection[]
  journals   Journaling[]
  userMeditations userMeditation[]
  created_at DateTime @default(now())
  verifiedAt DateTime?
  updated_at DateTime @updatedAt
}

model SystemLog {
  id          Int      @id @default(autoincrement())
  user        User?    @relation(fields: [userId], references: [user_id])
  userId      Int?     
  ipAddress   String
  device      String
  action      String
  method      String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FaceDetection {
  detection_id      Int      @id @default(autoincrement())
  user              User?    @relation(fields: [userId], references: [user_id])
  userId            Int?
  imageUrl    String
  mood        String
  detectedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Journaling {
  journal_id  Int      @id @default(autoincrement())
  user        User?    @relation(fields: [userId], references: [user_id])
  userId      Int?
  title       String
  content     String
  mood        String
  topic       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model meditation {
  meditation_id Int      @id @default(autoincrement())
  title         String
  description   String
  mediaUrl      String
  duration      Int
  userMeditations userMeditation[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model userMeditation {
  id            Int      @id @default(autoincrement())
  user          User?    @relation(fields: [userId], references: [user_id])
  userId        Int?
  meditation    meditation? @relation(fields: [meditationId], references: [meditation_id])
  meditationId  Int?
  completedAt   DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// chat


// visualisasion


