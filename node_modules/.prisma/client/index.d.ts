
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model SystemLog
 * 
 */
export type SystemLog = $Result.DefaultSelection<Prisma.$SystemLogPayload>
/**
 * Model FaceDetection
 * 
 */
export type FaceDetection = $Result.DefaultSelection<Prisma.$FaceDetectionPayload>
/**
 * Model Journaling
 * 
 */
export type Journaling = $Result.DefaultSelection<Prisma.$JournalingPayload>
/**
 * Model meditation
 * 
 */
export type meditation = $Result.DefaultSelection<Prisma.$meditationPayload>
/**
 * Model userMeditation
 * 
 */
export type userMeditation = $Result.DefaultSelection<Prisma.$userMeditationPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Mood: {
  HAPPY: 'HAPPY',
  SAD: 'SAD',
  ANGRY: 'ANGRY',
  SURPRISED: 'SURPRISED',
  NEUTRAL: 'NEUTRAL',
  FEARFUL: 'FEARFUL'
};

export type Mood = (typeof Mood)[keyof typeof Mood]

}

export type Mood = $Enums.Mood

export const Mood: typeof $Enums.Mood

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.systemLog`: Exposes CRUD operations for the **SystemLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemLogs
    * const systemLogs = await prisma.systemLog.findMany()
    * ```
    */
  get systemLog(): Prisma.SystemLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.faceDetection`: Exposes CRUD operations for the **FaceDetection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FaceDetections
    * const faceDetections = await prisma.faceDetection.findMany()
    * ```
    */
  get faceDetection(): Prisma.FaceDetectionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.journaling`: Exposes CRUD operations for the **Journaling** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Journalings
    * const journalings = await prisma.journaling.findMany()
    * ```
    */
  get journaling(): Prisma.JournalingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.meditation`: Exposes CRUD operations for the **meditation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Meditations
    * const meditations = await prisma.meditation.findMany()
    * ```
    */
  get meditation(): Prisma.meditationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userMeditation`: Exposes CRUD operations for the **userMeditation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserMeditations
    * const userMeditations = await prisma.userMeditation.findMany()
    * ```
    */
  get userMeditation(): Prisma.userMeditationDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    SystemLog: 'SystemLog',
    FaceDetection: 'FaceDetection',
    Journaling: 'Journaling',
    meditation: 'meditation',
    userMeditation: 'userMeditation'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "systemLog" | "faceDetection" | "journaling" | "meditation" | "userMeditation"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      SystemLog: {
        payload: Prisma.$SystemLogPayload<ExtArgs>
        fields: Prisma.SystemLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload>
          }
          findFirst: {
            args: Prisma.SystemLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload>
          }
          findMany: {
            args: Prisma.SystemLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload>[]
          }
          create: {
            args: Prisma.SystemLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload>
          }
          createMany: {
            args: Prisma.SystemLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SystemLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload>[]
          }
          delete: {
            args: Prisma.SystemLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload>
          }
          update: {
            args: Prisma.SystemLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload>
          }
          deleteMany: {
            args: Prisma.SystemLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SystemLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload>[]
          }
          upsert: {
            args: Prisma.SystemLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload>
          }
          aggregate: {
            args: Prisma.SystemLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemLog>
          }
          groupBy: {
            args: Prisma.SystemLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemLogCountArgs<ExtArgs>
            result: $Utils.Optional<SystemLogCountAggregateOutputType> | number
          }
        }
      }
      FaceDetection: {
        payload: Prisma.$FaceDetectionPayload<ExtArgs>
        fields: Prisma.FaceDetectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FaceDetectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaceDetectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FaceDetectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaceDetectionPayload>
          }
          findFirst: {
            args: Prisma.FaceDetectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaceDetectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FaceDetectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaceDetectionPayload>
          }
          findMany: {
            args: Prisma.FaceDetectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaceDetectionPayload>[]
          }
          create: {
            args: Prisma.FaceDetectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaceDetectionPayload>
          }
          createMany: {
            args: Prisma.FaceDetectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FaceDetectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaceDetectionPayload>[]
          }
          delete: {
            args: Prisma.FaceDetectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaceDetectionPayload>
          }
          update: {
            args: Prisma.FaceDetectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaceDetectionPayload>
          }
          deleteMany: {
            args: Prisma.FaceDetectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FaceDetectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FaceDetectionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaceDetectionPayload>[]
          }
          upsert: {
            args: Prisma.FaceDetectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaceDetectionPayload>
          }
          aggregate: {
            args: Prisma.FaceDetectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFaceDetection>
          }
          groupBy: {
            args: Prisma.FaceDetectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<FaceDetectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.FaceDetectionCountArgs<ExtArgs>
            result: $Utils.Optional<FaceDetectionCountAggregateOutputType> | number
          }
        }
      }
      Journaling: {
        payload: Prisma.$JournalingPayload<ExtArgs>
        fields: Prisma.JournalingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JournalingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JournalingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalingPayload>
          }
          findFirst: {
            args: Prisma.JournalingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JournalingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalingPayload>
          }
          findMany: {
            args: Prisma.JournalingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalingPayload>[]
          }
          create: {
            args: Prisma.JournalingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalingPayload>
          }
          createMany: {
            args: Prisma.JournalingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JournalingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalingPayload>[]
          }
          delete: {
            args: Prisma.JournalingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalingPayload>
          }
          update: {
            args: Prisma.JournalingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalingPayload>
          }
          deleteMany: {
            args: Prisma.JournalingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JournalingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JournalingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalingPayload>[]
          }
          upsert: {
            args: Prisma.JournalingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalingPayload>
          }
          aggregate: {
            args: Prisma.JournalingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJournaling>
          }
          groupBy: {
            args: Prisma.JournalingGroupByArgs<ExtArgs>
            result: $Utils.Optional<JournalingGroupByOutputType>[]
          }
          count: {
            args: Prisma.JournalingCountArgs<ExtArgs>
            result: $Utils.Optional<JournalingCountAggregateOutputType> | number
          }
        }
      }
      meditation: {
        payload: Prisma.$meditationPayload<ExtArgs>
        fields: Prisma.meditationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.meditationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$meditationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.meditationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$meditationPayload>
          }
          findFirst: {
            args: Prisma.meditationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$meditationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.meditationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$meditationPayload>
          }
          findMany: {
            args: Prisma.meditationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$meditationPayload>[]
          }
          create: {
            args: Prisma.meditationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$meditationPayload>
          }
          createMany: {
            args: Prisma.meditationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.meditationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$meditationPayload>[]
          }
          delete: {
            args: Prisma.meditationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$meditationPayload>
          }
          update: {
            args: Prisma.meditationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$meditationPayload>
          }
          deleteMany: {
            args: Prisma.meditationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.meditationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.meditationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$meditationPayload>[]
          }
          upsert: {
            args: Prisma.meditationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$meditationPayload>
          }
          aggregate: {
            args: Prisma.MeditationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMeditation>
          }
          groupBy: {
            args: Prisma.meditationGroupByArgs<ExtArgs>
            result: $Utils.Optional<MeditationGroupByOutputType>[]
          }
          count: {
            args: Prisma.meditationCountArgs<ExtArgs>
            result: $Utils.Optional<MeditationCountAggregateOutputType> | number
          }
        }
      }
      userMeditation: {
        payload: Prisma.$userMeditationPayload<ExtArgs>
        fields: Prisma.userMeditationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userMeditationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userMeditationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userMeditationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userMeditationPayload>
          }
          findFirst: {
            args: Prisma.userMeditationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userMeditationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userMeditationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userMeditationPayload>
          }
          findMany: {
            args: Prisma.userMeditationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userMeditationPayload>[]
          }
          create: {
            args: Prisma.userMeditationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userMeditationPayload>
          }
          createMany: {
            args: Prisma.userMeditationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.userMeditationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userMeditationPayload>[]
          }
          delete: {
            args: Prisma.userMeditationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userMeditationPayload>
          }
          update: {
            args: Prisma.userMeditationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userMeditationPayload>
          }
          deleteMany: {
            args: Prisma.userMeditationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userMeditationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.userMeditationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userMeditationPayload>[]
          }
          upsert: {
            args: Prisma.userMeditationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userMeditationPayload>
          }
          aggregate: {
            args: Prisma.UserMeditationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserMeditation>
          }
          groupBy: {
            args: Prisma.userMeditationGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserMeditationGroupByOutputType>[]
          }
          count: {
            args: Prisma.userMeditationCountArgs<ExtArgs>
            result: $Utils.Optional<UserMeditationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    systemLog?: SystemLogOmit
    faceDetection?: FaceDetectionOmit
    journaling?: JournalingOmit
    meditation?: meditationOmit
    userMeditation?: userMeditationOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    logins: number
    detections: number
    journals: number
    userMeditations: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logins?: boolean | UserCountOutputTypeCountLoginsArgs
    detections?: boolean | UserCountOutputTypeCountDetectionsArgs
    journals?: boolean | UserCountOutputTypeCountJournalsArgs
    userMeditations?: boolean | UserCountOutputTypeCountUserMeditationsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLoginsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDetectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FaceDetectionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountJournalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JournalingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserMeditationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userMeditationWhereInput
  }


  /**
   * Count Type MeditationCountOutputType
   */

  export type MeditationCountOutputType = {
    userMeditations: number
  }

  export type MeditationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userMeditations?: boolean | MeditationCountOutputTypeCountUserMeditationsArgs
  }

  // Custom InputTypes
  /**
   * MeditationCountOutputType without action
   */
  export type MeditationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeditationCountOutputType
     */
    select?: MeditationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MeditationCountOutputType without action
   */
  export type MeditationCountOutputTypeCountUserMeditationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userMeditationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    user_id: number | null
  }

  export type UserSumAggregateOutputType = {
    user_id: number | null
  }

  export type UserMinAggregateOutputType = {
    user_id: number | null
    first_name: string | null
    last_name: string | null
    email: string | null
    phone_number: string | null
    password: string | null
    created_at: Date | null
    verifiedAt: Date | null
    updated_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    user_id: number | null
    first_name: string | null
    last_name: string | null
    email: string | null
    phone_number: string | null
    password: string | null
    created_at: Date | null
    verifiedAt: Date | null
    updated_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    user_id: number
    first_name: number
    last_name: number
    email: number
    phone_number: number
    password: number
    created_at: number
    verifiedAt: number
    updated_at: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    user_id?: true
  }

  export type UserSumAggregateInputType = {
    user_id?: true
  }

  export type UserMinAggregateInputType = {
    user_id?: true
    first_name?: true
    last_name?: true
    email?: true
    phone_number?: true
    password?: true
    created_at?: true
    verifiedAt?: true
    updated_at?: true
  }

  export type UserMaxAggregateInputType = {
    user_id?: true
    first_name?: true
    last_name?: true
    email?: true
    phone_number?: true
    password?: true
    created_at?: true
    verifiedAt?: true
    updated_at?: true
  }

  export type UserCountAggregateInputType = {
    user_id?: true
    first_name?: true
    last_name?: true
    email?: true
    phone_number?: true
    password?: true
    created_at?: true
    verifiedAt?: true
    updated_at?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    user_id: number
    first_name: string
    last_name: string
    email: string
    phone_number: string
    password: string
    created_at: Date
    verifiedAt: Date | null
    updated_at: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    phone_number?: boolean
    password?: boolean
    created_at?: boolean
    verifiedAt?: boolean
    updated_at?: boolean
    logins?: boolean | User$loginsArgs<ExtArgs>
    detections?: boolean | User$detectionsArgs<ExtArgs>
    journals?: boolean | User$journalsArgs<ExtArgs>
    userMeditations?: boolean | User$userMeditationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    phone_number?: boolean
    password?: boolean
    created_at?: boolean
    verifiedAt?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    phone_number?: boolean
    password?: boolean
    created_at?: boolean
    verifiedAt?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    user_id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    phone_number?: boolean
    password?: boolean
    created_at?: boolean
    verifiedAt?: boolean
    updated_at?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"user_id" | "first_name" | "last_name" | "email" | "phone_number" | "password" | "created_at" | "verifiedAt" | "updated_at", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logins?: boolean | User$loginsArgs<ExtArgs>
    detections?: boolean | User$detectionsArgs<ExtArgs>
    journals?: boolean | User$journalsArgs<ExtArgs>
    userMeditations?: boolean | User$userMeditationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      logins: Prisma.$SystemLogPayload<ExtArgs>[]
      detections: Prisma.$FaceDetectionPayload<ExtArgs>[]
      journals: Prisma.$JournalingPayload<ExtArgs>[]
      userMeditations: Prisma.$userMeditationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: number
      first_name: string
      last_name: string
      email: string
      phone_number: string
      password: string
      created_at: Date
      verifiedAt: Date | null
      updated_at: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const userWithUser_idOnly = await prisma.user.findMany({ select: { user_id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `user_id`
     * const userWithUser_idOnly = await prisma.user.createManyAndReturn({
     *   select: { user_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `user_id`
     * const userWithUser_idOnly = await prisma.user.updateManyAndReturn({
     *   select: { user_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    logins<T extends User$loginsArgs<ExtArgs> = {}>(args?: Subset<T, User$loginsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    detections<T extends User$detectionsArgs<ExtArgs> = {}>(args?: Subset<T, User$detectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FaceDetectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    journals<T extends User$journalsArgs<ExtArgs> = {}>(args?: Subset<T, User$journalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JournalingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userMeditations<T extends User$userMeditationsArgs<ExtArgs> = {}>(args?: Subset<T, User$userMeditationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userMeditationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly user_id: FieldRef<"User", 'Int'>
    readonly first_name: FieldRef<"User", 'String'>
    readonly last_name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly phone_number: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly created_at: FieldRef<"User", 'DateTime'>
    readonly verifiedAt: FieldRef<"User", 'DateTime'>
    readonly updated_at: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.logins
   */
  export type User$loginsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLog
     */
    omit?: SystemLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemLogInclude<ExtArgs> | null
    where?: SystemLogWhereInput
    orderBy?: SystemLogOrderByWithRelationInput | SystemLogOrderByWithRelationInput[]
    cursor?: SystemLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SystemLogScalarFieldEnum | SystemLogScalarFieldEnum[]
  }

  /**
   * User.detections
   */
  export type User$detectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaceDetection
     */
    select?: FaceDetectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaceDetection
     */
    omit?: FaceDetectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaceDetectionInclude<ExtArgs> | null
    where?: FaceDetectionWhereInput
    orderBy?: FaceDetectionOrderByWithRelationInput | FaceDetectionOrderByWithRelationInput[]
    cursor?: FaceDetectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FaceDetectionScalarFieldEnum | FaceDetectionScalarFieldEnum[]
  }

  /**
   * User.journals
   */
  export type User$journalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Journaling
     */
    select?: JournalingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Journaling
     */
    omit?: JournalingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalingInclude<ExtArgs> | null
    where?: JournalingWhereInput
    orderBy?: JournalingOrderByWithRelationInput | JournalingOrderByWithRelationInput[]
    cursor?: JournalingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JournalingScalarFieldEnum | JournalingScalarFieldEnum[]
  }

  /**
   * User.userMeditations
   */
  export type User$userMeditationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userMeditation
     */
    select?: userMeditationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userMeditation
     */
    omit?: userMeditationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userMeditationInclude<ExtArgs> | null
    where?: userMeditationWhereInput
    orderBy?: userMeditationOrderByWithRelationInput | userMeditationOrderByWithRelationInput[]
    cursor?: userMeditationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserMeditationScalarFieldEnum | UserMeditationScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model SystemLog
   */

  export type AggregateSystemLog = {
    _count: SystemLogCountAggregateOutputType | null
    _avg: SystemLogAvgAggregateOutputType | null
    _sum: SystemLogSumAggregateOutputType | null
    _min: SystemLogMinAggregateOutputType | null
    _max: SystemLogMaxAggregateOutputType | null
  }

  export type SystemLogAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SystemLogSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SystemLogMinAggregateOutputType = {
    id: number | null
    userId: number | null
    ipAddress: string | null
    device: string | null
    action: string | null
    method: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemLogMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    ipAddress: string | null
    device: string | null
    action: string | null
    method: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemLogCountAggregateOutputType = {
    id: number
    userId: number
    ipAddress: number
    device: number
    action: number
    method: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SystemLogAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SystemLogSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SystemLogMinAggregateInputType = {
    id?: true
    userId?: true
    ipAddress?: true
    device?: true
    action?: true
    method?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemLogMaxAggregateInputType = {
    id?: true
    userId?: true
    ipAddress?: true
    device?: true
    action?: true
    method?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemLogCountAggregateInputType = {
    id?: true
    userId?: true
    ipAddress?: true
    device?: true
    action?: true
    method?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SystemLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemLog to aggregate.
     */
    where?: SystemLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemLogs to fetch.
     */
    orderBy?: SystemLogOrderByWithRelationInput | SystemLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemLogs
    **/
    _count?: true | SystemLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SystemLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SystemLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemLogMaxAggregateInputType
  }

  export type GetSystemLogAggregateType<T extends SystemLogAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemLog[P]>
      : GetScalarType<T[P], AggregateSystemLog[P]>
  }




  export type SystemLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemLogWhereInput
    orderBy?: SystemLogOrderByWithAggregationInput | SystemLogOrderByWithAggregationInput[]
    by: SystemLogScalarFieldEnum[] | SystemLogScalarFieldEnum
    having?: SystemLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemLogCountAggregateInputType | true
    _avg?: SystemLogAvgAggregateInputType
    _sum?: SystemLogSumAggregateInputType
    _min?: SystemLogMinAggregateInputType
    _max?: SystemLogMaxAggregateInputType
  }

  export type SystemLogGroupByOutputType = {
    id: number
    userId: number | null
    ipAddress: string
    device: string
    action: string
    method: string
    description: string
    createdAt: Date
    updatedAt: Date
    _count: SystemLogCountAggregateOutputType | null
    _avg: SystemLogAvgAggregateOutputType | null
    _sum: SystemLogSumAggregateOutputType | null
    _min: SystemLogMinAggregateOutputType | null
    _max: SystemLogMaxAggregateOutputType | null
  }

  type GetSystemLogGroupByPayload<T extends SystemLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemLogGroupByOutputType[P]>
            : GetScalarType<T[P], SystemLogGroupByOutputType[P]>
        }
      >
    >


  export type SystemLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    ipAddress?: boolean
    device?: boolean
    action?: boolean
    method?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | SystemLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["systemLog"]>

  export type SystemLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    ipAddress?: boolean
    device?: boolean
    action?: boolean
    method?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | SystemLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["systemLog"]>

  export type SystemLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    ipAddress?: boolean
    device?: boolean
    action?: boolean
    method?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | SystemLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["systemLog"]>

  export type SystemLogSelectScalar = {
    id?: boolean
    userId?: boolean
    ipAddress?: boolean
    device?: boolean
    action?: boolean
    method?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SystemLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "ipAddress" | "device" | "action" | "method" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["systemLog"]>
  export type SystemLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | SystemLog$userArgs<ExtArgs>
  }
  export type SystemLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | SystemLog$userArgs<ExtArgs>
  }
  export type SystemLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | SystemLog$userArgs<ExtArgs>
  }

  export type $SystemLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number | null
      ipAddress: string
      device: string
      action: string
      method: string
      description: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["systemLog"]>
    composites: {}
  }

  type SystemLogGetPayload<S extends boolean | null | undefined | SystemLogDefaultArgs> = $Result.GetResult<Prisma.$SystemLogPayload, S>

  type SystemLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SystemLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SystemLogCountAggregateInputType | true
    }

  export interface SystemLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemLog'], meta: { name: 'SystemLog' } }
    /**
     * Find zero or one SystemLog that matches the filter.
     * @param {SystemLogFindUniqueArgs} args - Arguments to find a SystemLog
     * @example
     * // Get one SystemLog
     * const systemLog = await prisma.systemLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemLogFindUniqueArgs>(args: SelectSubset<T, SystemLogFindUniqueArgs<ExtArgs>>): Prisma__SystemLogClient<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SystemLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SystemLogFindUniqueOrThrowArgs} args - Arguments to find a SystemLog
     * @example
     * // Get one SystemLog
     * const systemLog = await prisma.systemLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemLogFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemLogClient<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogFindFirstArgs} args - Arguments to find a SystemLog
     * @example
     * // Get one SystemLog
     * const systemLog = await prisma.systemLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemLogFindFirstArgs>(args?: SelectSubset<T, SystemLogFindFirstArgs<ExtArgs>>): Prisma__SystemLogClient<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogFindFirstOrThrowArgs} args - Arguments to find a SystemLog
     * @example
     * // Get one SystemLog
     * const systemLog = await prisma.systemLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemLogFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemLogClient<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SystemLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemLogs
     * const systemLogs = await prisma.systemLog.findMany()
     * 
     * // Get first 10 SystemLogs
     * const systemLogs = await prisma.systemLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemLogWithIdOnly = await prisma.systemLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemLogFindManyArgs>(args?: SelectSubset<T, SystemLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SystemLog.
     * @param {SystemLogCreateArgs} args - Arguments to create a SystemLog.
     * @example
     * // Create one SystemLog
     * const SystemLog = await prisma.systemLog.create({
     *   data: {
     *     // ... data to create a SystemLog
     *   }
     * })
     * 
     */
    create<T extends SystemLogCreateArgs>(args: SelectSubset<T, SystemLogCreateArgs<ExtArgs>>): Prisma__SystemLogClient<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SystemLogs.
     * @param {SystemLogCreateManyArgs} args - Arguments to create many SystemLogs.
     * @example
     * // Create many SystemLogs
     * const systemLog = await prisma.systemLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemLogCreateManyArgs>(args?: SelectSubset<T, SystemLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SystemLogs and returns the data saved in the database.
     * @param {SystemLogCreateManyAndReturnArgs} args - Arguments to create many SystemLogs.
     * @example
     * // Create many SystemLogs
     * const systemLog = await prisma.systemLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SystemLogs and only return the `id`
     * const systemLogWithIdOnly = await prisma.systemLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SystemLogCreateManyAndReturnArgs>(args?: SelectSubset<T, SystemLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SystemLog.
     * @param {SystemLogDeleteArgs} args - Arguments to delete one SystemLog.
     * @example
     * // Delete one SystemLog
     * const SystemLog = await prisma.systemLog.delete({
     *   where: {
     *     // ... filter to delete one SystemLog
     *   }
     * })
     * 
     */
    delete<T extends SystemLogDeleteArgs>(args: SelectSubset<T, SystemLogDeleteArgs<ExtArgs>>): Prisma__SystemLogClient<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SystemLog.
     * @param {SystemLogUpdateArgs} args - Arguments to update one SystemLog.
     * @example
     * // Update one SystemLog
     * const systemLog = await prisma.systemLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemLogUpdateArgs>(args: SelectSubset<T, SystemLogUpdateArgs<ExtArgs>>): Prisma__SystemLogClient<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SystemLogs.
     * @param {SystemLogDeleteManyArgs} args - Arguments to filter SystemLogs to delete.
     * @example
     * // Delete a few SystemLogs
     * const { count } = await prisma.systemLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemLogDeleteManyArgs>(args?: SelectSubset<T, SystemLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemLogs
     * const systemLog = await prisma.systemLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemLogUpdateManyArgs>(args: SelectSubset<T, SystemLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemLogs and returns the data updated in the database.
     * @param {SystemLogUpdateManyAndReturnArgs} args - Arguments to update many SystemLogs.
     * @example
     * // Update many SystemLogs
     * const systemLog = await prisma.systemLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SystemLogs and only return the `id`
     * const systemLogWithIdOnly = await prisma.systemLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SystemLogUpdateManyAndReturnArgs>(args: SelectSubset<T, SystemLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SystemLog.
     * @param {SystemLogUpsertArgs} args - Arguments to update or create a SystemLog.
     * @example
     * // Update or create a SystemLog
     * const systemLog = await prisma.systemLog.upsert({
     *   create: {
     *     // ... data to create a SystemLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemLog we want to update
     *   }
     * })
     */
    upsert<T extends SystemLogUpsertArgs>(args: SelectSubset<T, SystemLogUpsertArgs<ExtArgs>>): Prisma__SystemLogClient<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SystemLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogCountArgs} args - Arguments to filter SystemLogs to count.
     * @example
     * // Count the number of SystemLogs
     * const count = await prisma.systemLog.count({
     *   where: {
     *     // ... the filter for the SystemLogs we want to count
     *   }
     * })
    **/
    count<T extends SystemLogCountArgs>(
      args?: Subset<T, SystemLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemLogAggregateArgs>(args: Subset<T, SystemLogAggregateArgs>): Prisma.PrismaPromise<GetSystemLogAggregateType<T>>

    /**
     * Group by SystemLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemLogGroupByArgs['orderBy'] }
        : { orderBy?: SystemLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemLog model
   */
  readonly fields: SystemLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends SystemLog$userArgs<ExtArgs> = {}>(args?: Subset<T, SystemLog$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemLog model
   */
  interface SystemLogFieldRefs {
    readonly id: FieldRef<"SystemLog", 'Int'>
    readonly userId: FieldRef<"SystemLog", 'Int'>
    readonly ipAddress: FieldRef<"SystemLog", 'String'>
    readonly device: FieldRef<"SystemLog", 'String'>
    readonly action: FieldRef<"SystemLog", 'String'>
    readonly method: FieldRef<"SystemLog", 'String'>
    readonly description: FieldRef<"SystemLog", 'String'>
    readonly createdAt: FieldRef<"SystemLog", 'DateTime'>
    readonly updatedAt: FieldRef<"SystemLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SystemLog findUnique
   */
  export type SystemLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLog
     */
    omit?: SystemLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemLogInclude<ExtArgs> | null
    /**
     * Filter, which SystemLog to fetch.
     */
    where: SystemLogWhereUniqueInput
  }

  /**
   * SystemLog findUniqueOrThrow
   */
  export type SystemLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLog
     */
    omit?: SystemLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemLogInclude<ExtArgs> | null
    /**
     * Filter, which SystemLog to fetch.
     */
    where: SystemLogWhereUniqueInput
  }

  /**
   * SystemLog findFirst
   */
  export type SystemLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLog
     */
    omit?: SystemLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemLogInclude<ExtArgs> | null
    /**
     * Filter, which SystemLog to fetch.
     */
    where?: SystemLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemLogs to fetch.
     */
    orderBy?: SystemLogOrderByWithRelationInput | SystemLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemLogs.
     */
    cursor?: SystemLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemLogs.
     */
    distinct?: SystemLogScalarFieldEnum | SystemLogScalarFieldEnum[]
  }

  /**
   * SystemLog findFirstOrThrow
   */
  export type SystemLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLog
     */
    omit?: SystemLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemLogInclude<ExtArgs> | null
    /**
     * Filter, which SystemLog to fetch.
     */
    where?: SystemLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemLogs to fetch.
     */
    orderBy?: SystemLogOrderByWithRelationInput | SystemLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemLogs.
     */
    cursor?: SystemLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemLogs.
     */
    distinct?: SystemLogScalarFieldEnum | SystemLogScalarFieldEnum[]
  }

  /**
   * SystemLog findMany
   */
  export type SystemLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLog
     */
    omit?: SystemLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemLogInclude<ExtArgs> | null
    /**
     * Filter, which SystemLogs to fetch.
     */
    where?: SystemLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemLogs to fetch.
     */
    orderBy?: SystemLogOrderByWithRelationInput | SystemLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemLogs.
     */
    cursor?: SystemLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemLogs.
     */
    skip?: number
    distinct?: SystemLogScalarFieldEnum | SystemLogScalarFieldEnum[]
  }

  /**
   * SystemLog create
   */
  export type SystemLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLog
     */
    omit?: SystemLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemLogInclude<ExtArgs> | null
    /**
     * The data needed to create a SystemLog.
     */
    data: XOR<SystemLogCreateInput, SystemLogUncheckedCreateInput>
  }

  /**
   * SystemLog createMany
   */
  export type SystemLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemLogs.
     */
    data: SystemLogCreateManyInput | SystemLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemLog createManyAndReturn
   */
  export type SystemLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLog
     */
    omit?: SystemLogOmit<ExtArgs> | null
    /**
     * The data used to create many SystemLogs.
     */
    data: SystemLogCreateManyInput | SystemLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SystemLog update
   */
  export type SystemLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLog
     */
    omit?: SystemLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemLogInclude<ExtArgs> | null
    /**
     * The data needed to update a SystemLog.
     */
    data: XOR<SystemLogUpdateInput, SystemLogUncheckedUpdateInput>
    /**
     * Choose, which SystemLog to update.
     */
    where: SystemLogWhereUniqueInput
  }

  /**
   * SystemLog updateMany
   */
  export type SystemLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemLogs.
     */
    data: XOR<SystemLogUpdateManyMutationInput, SystemLogUncheckedUpdateManyInput>
    /**
     * Filter which SystemLogs to update
     */
    where?: SystemLogWhereInput
    /**
     * Limit how many SystemLogs to update.
     */
    limit?: number
  }

  /**
   * SystemLog updateManyAndReturn
   */
  export type SystemLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLog
     */
    omit?: SystemLogOmit<ExtArgs> | null
    /**
     * The data used to update SystemLogs.
     */
    data: XOR<SystemLogUpdateManyMutationInput, SystemLogUncheckedUpdateManyInput>
    /**
     * Filter which SystemLogs to update
     */
    where?: SystemLogWhereInput
    /**
     * Limit how many SystemLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SystemLog upsert
   */
  export type SystemLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLog
     */
    omit?: SystemLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemLogInclude<ExtArgs> | null
    /**
     * The filter to search for the SystemLog to update in case it exists.
     */
    where: SystemLogWhereUniqueInput
    /**
     * In case the SystemLog found by the `where` argument doesn't exist, create a new SystemLog with this data.
     */
    create: XOR<SystemLogCreateInput, SystemLogUncheckedCreateInput>
    /**
     * In case the SystemLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemLogUpdateInput, SystemLogUncheckedUpdateInput>
  }

  /**
   * SystemLog delete
   */
  export type SystemLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLog
     */
    omit?: SystemLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemLogInclude<ExtArgs> | null
    /**
     * Filter which SystemLog to delete.
     */
    where: SystemLogWhereUniqueInput
  }

  /**
   * SystemLog deleteMany
   */
  export type SystemLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemLogs to delete
     */
    where?: SystemLogWhereInput
    /**
     * Limit how many SystemLogs to delete.
     */
    limit?: number
  }

  /**
   * SystemLog.user
   */
  export type SystemLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * SystemLog without action
   */
  export type SystemLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemLog
     */
    omit?: SystemLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemLogInclude<ExtArgs> | null
  }


  /**
   * Model FaceDetection
   */

  export type AggregateFaceDetection = {
    _count: FaceDetectionCountAggregateOutputType | null
    _avg: FaceDetectionAvgAggregateOutputType | null
    _sum: FaceDetectionSumAggregateOutputType | null
    _min: FaceDetectionMinAggregateOutputType | null
    _max: FaceDetectionMaxAggregateOutputType | null
  }

  export type FaceDetectionAvgAggregateOutputType = {
    detection_id: number | null
    userId: number | null
  }

  export type FaceDetectionSumAggregateOutputType = {
    detection_id: number | null
    userId: number | null
  }

  export type FaceDetectionMinAggregateOutputType = {
    detection_id: number | null
    userId: number | null
    imageUrl: string | null
    mood: $Enums.Mood | null
    detectedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FaceDetectionMaxAggregateOutputType = {
    detection_id: number | null
    userId: number | null
    imageUrl: string | null
    mood: $Enums.Mood | null
    detectedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FaceDetectionCountAggregateOutputType = {
    detection_id: number
    userId: number
    imageUrl: number
    mood: number
    detectedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FaceDetectionAvgAggregateInputType = {
    detection_id?: true
    userId?: true
  }

  export type FaceDetectionSumAggregateInputType = {
    detection_id?: true
    userId?: true
  }

  export type FaceDetectionMinAggregateInputType = {
    detection_id?: true
    userId?: true
    imageUrl?: true
    mood?: true
    detectedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FaceDetectionMaxAggregateInputType = {
    detection_id?: true
    userId?: true
    imageUrl?: true
    mood?: true
    detectedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FaceDetectionCountAggregateInputType = {
    detection_id?: true
    userId?: true
    imageUrl?: true
    mood?: true
    detectedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FaceDetectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FaceDetection to aggregate.
     */
    where?: FaceDetectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FaceDetections to fetch.
     */
    orderBy?: FaceDetectionOrderByWithRelationInput | FaceDetectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FaceDetectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FaceDetections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FaceDetections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FaceDetections
    **/
    _count?: true | FaceDetectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FaceDetectionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FaceDetectionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FaceDetectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FaceDetectionMaxAggregateInputType
  }

  export type GetFaceDetectionAggregateType<T extends FaceDetectionAggregateArgs> = {
        [P in keyof T & keyof AggregateFaceDetection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFaceDetection[P]>
      : GetScalarType<T[P], AggregateFaceDetection[P]>
  }




  export type FaceDetectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FaceDetectionWhereInput
    orderBy?: FaceDetectionOrderByWithAggregationInput | FaceDetectionOrderByWithAggregationInput[]
    by: FaceDetectionScalarFieldEnum[] | FaceDetectionScalarFieldEnum
    having?: FaceDetectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FaceDetectionCountAggregateInputType | true
    _avg?: FaceDetectionAvgAggregateInputType
    _sum?: FaceDetectionSumAggregateInputType
    _min?: FaceDetectionMinAggregateInputType
    _max?: FaceDetectionMaxAggregateInputType
  }

  export type FaceDetectionGroupByOutputType = {
    detection_id: number
    userId: number | null
    imageUrl: string
    mood: $Enums.Mood
    detectedAt: Date
    createdAt: Date
    updatedAt: Date
    _count: FaceDetectionCountAggregateOutputType | null
    _avg: FaceDetectionAvgAggregateOutputType | null
    _sum: FaceDetectionSumAggregateOutputType | null
    _min: FaceDetectionMinAggregateOutputType | null
    _max: FaceDetectionMaxAggregateOutputType | null
  }

  type GetFaceDetectionGroupByPayload<T extends FaceDetectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FaceDetectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FaceDetectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FaceDetectionGroupByOutputType[P]>
            : GetScalarType<T[P], FaceDetectionGroupByOutputType[P]>
        }
      >
    >


  export type FaceDetectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    detection_id?: boolean
    userId?: boolean
    imageUrl?: boolean
    mood?: boolean
    detectedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | FaceDetection$userArgs<ExtArgs>
  }, ExtArgs["result"]["faceDetection"]>

  export type FaceDetectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    detection_id?: boolean
    userId?: boolean
    imageUrl?: boolean
    mood?: boolean
    detectedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | FaceDetection$userArgs<ExtArgs>
  }, ExtArgs["result"]["faceDetection"]>

  export type FaceDetectionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    detection_id?: boolean
    userId?: boolean
    imageUrl?: boolean
    mood?: boolean
    detectedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | FaceDetection$userArgs<ExtArgs>
  }, ExtArgs["result"]["faceDetection"]>

  export type FaceDetectionSelectScalar = {
    detection_id?: boolean
    userId?: boolean
    imageUrl?: boolean
    mood?: boolean
    detectedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FaceDetectionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"detection_id" | "userId" | "imageUrl" | "mood" | "detectedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["faceDetection"]>
  export type FaceDetectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | FaceDetection$userArgs<ExtArgs>
  }
  export type FaceDetectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | FaceDetection$userArgs<ExtArgs>
  }
  export type FaceDetectionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | FaceDetection$userArgs<ExtArgs>
  }

  export type $FaceDetectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FaceDetection"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      detection_id: number
      userId: number | null
      imageUrl: string
      mood: $Enums.Mood
      detectedAt: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["faceDetection"]>
    composites: {}
  }

  type FaceDetectionGetPayload<S extends boolean | null | undefined | FaceDetectionDefaultArgs> = $Result.GetResult<Prisma.$FaceDetectionPayload, S>

  type FaceDetectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FaceDetectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FaceDetectionCountAggregateInputType | true
    }

  export interface FaceDetectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FaceDetection'], meta: { name: 'FaceDetection' } }
    /**
     * Find zero or one FaceDetection that matches the filter.
     * @param {FaceDetectionFindUniqueArgs} args - Arguments to find a FaceDetection
     * @example
     * // Get one FaceDetection
     * const faceDetection = await prisma.faceDetection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FaceDetectionFindUniqueArgs>(args: SelectSubset<T, FaceDetectionFindUniqueArgs<ExtArgs>>): Prisma__FaceDetectionClient<$Result.GetResult<Prisma.$FaceDetectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FaceDetection that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FaceDetectionFindUniqueOrThrowArgs} args - Arguments to find a FaceDetection
     * @example
     * // Get one FaceDetection
     * const faceDetection = await prisma.faceDetection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FaceDetectionFindUniqueOrThrowArgs>(args: SelectSubset<T, FaceDetectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FaceDetectionClient<$Result.GetResult<Prisma.$FaceDetectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FaceDetection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaceDetectionFindFirstArgs} args - Arguments to find a FaceDetection
     * @example
     * // Get one FaceDetection
     * const faceDetection = await prisma.faceDetection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FaceDetectionFindFirstArgs>(args?: SelectSubset<T, FaceDetectionFindFirstArgs<ExtArgs>>): Prisma__FaceDetectionClient<$Result.GetResult<Prisma.$FaceDetectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FaceDetection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaceDetectionFindFirstOrThrowArgs} args - Arguments to find a FaceDetection
     * @example
     * // Get one FaceDetection
     * const faceDetection = await prisma.faceDetection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FaceDetectionFindFirstOrThrowArgs>(args?: SelectSubset<T, FaceDetectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__FaceDetectionClient<$Result.GetResult<Prisma.$FaceDetectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FaceDetections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaceDetectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FaceDetections
     * const faceDetections = await prisma.faceDetection.findMany()
     * 
     * // Get first 10 FaceDetections
     * const faceDetections = await prisma.faceDetection.findMany({ take: 10 })
     * 
     * // Only select the `detection_id`
     * const faceDetectionWithDetection_idOnly = await prisma.faceDetection.findMany({ select: { detection_id: true } })
     * 
     */
    findMany<T extends FaceDetectionFindManyArgs>(args?: SelectSubset<T, FaceDetectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FaceDetectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FaceDetection.
     * @param {FaceDetectionCreateArgs} args - Arguments to create a FaceDetection.
     * @example
     * // Create one FaceDetection
     * const FaceDetection = await prisma.faceDetection.create({
     *   data: {
     *     // ... data to create a FaceDetection
     *   }
     * })
     * 
     */
    create<T extends FaceDetectionCreateArgs>(args: SelectSubset<T, FaceDetectionCreateArgs<ExtArgs>>): Prisma__FaceDetectionClient<$Result.GetResult<Prisma.$FaceDetectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FaceDetections.
     * @param {FaceDetectionCreateManyArgs} args - Arguments to create many FaceDetections.
     * @example
     * // Create many FaceDetections
     * const faceDetection = await prisma.faceDetection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FaceDetectionCreateManyArgs>(args?: SelectSubset<T, FaceDetectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FaceDetections and returns the data saved in the database.
     * @param {FaceDetectionCreateManyAndReturnArgs} args - Arguments to create many FaceDetections.
     * @example
     * // Create many FaceDetections
     * const faceDetection = await prisma.faceDetection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FaceDetections and only return the `detection_id`
     * const faceDetectionWithDetection_idOnly = await prisma.faceDetection.createManyAndReturn({
     *   select: { detection_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FaceDetectionCreateManyAndReturnArgs>(args?: SelectSubset<T, FaceDetectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FaceDetectionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FaceDetection.
     * @param {FaceDetectionDeleteArgs} args - Arguments to delete one FaceDetection.
     * @example
     * // Delete one FaceDetection
     * const FaceDetection = await prisma.faceDetection.delete({
     *   where: {
     *     // ... filter to delete one FaceDetection
     *   }
     * })
     * 
     */
    delete<T extends FaceDetectionDeleteArgs>(args: SelectSubset<T, FaceDetectionDeleteArgs<ExtArgs>>): Prisma__FaceDetectionClient<$Result.GetResult<Prisma.$FaceDetectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FaceDetection.
     * @param {FaceDetectionUpdateArgs} args - Arguments to update one FaceDetection.
     * @example
     * // Update one FaceDetection
     * const faceDetection = await prisma.faceDetection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FaceDetectionUpdateArgs>(args: SelectSubset<T, FaceDetectionUpdateArgs<ExtArgs>>): Prisma__FaceDetectionClient<$Result.GetResult<Prisma.$FaceDetectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FaceDetections.
     * @param {FaceDetectionDeleteManyArgs} args - Arguments to filter FaceDetections to delete.
     * @example
     * // Delete a few FaceDetections
     * const { count } = await prisma.faceDetection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FaceDetectionDeleteManyArgs>(args?: SelectSubset<T, FaceDetectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FaceDetections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaceDetectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FaceDetections
     * const faceDetection = await prisma.faceDetection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FaceDetectionUpdateManyArgs>(args: SelectSubset<T, FaceDetectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FaceDetections and returns the data updated in the database.
     * @param {FaceDetectionUpdateManyAndReturnArgs} args - Arguments to update many FaceDetections.
     * @example
     * // Update many FaceDetections
     * const faceDetection = await prisma.faceDetection.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FaceDetections and only return the `detection_id`
     * const faceDetectionWithDetection_idOnly = await prisma.faceDetection.updateManyAndReturn({
     *   select: { detection_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FaceDetectionUpdateManyAndReturnArgs>(args: SelectSubset<T, FaceDetectionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FaceDetectionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FaceDetection.
     * @param {FaceDetectionUpsertArgs} args - Arguments to update or create a FaceDetection.
     * @example
     * // Update or create a FaceDetection
     * const faceDetection = await prisma.faceDetection.upsert({
     *   create: {
     *     // ... data to create a FaceDetection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FaceDetection we want to update
     *   }
     * })
     */
    upsert<T extends FaceDetectionUpsertArgs>(args: SelectSubset<T, FaceDetectionUpsertArgs<ExtArgs>>): Prisma__FaceDetectionClient<$Result.GetResult<Prisma.$FaceDetectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FaceDetections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaceDetectionCountArgs} args - Arguments to filter FaceDetections to count.
     * @example
     * // Count the number of FaceDetections
     * const count = await prisma.faceDetection.count({
     *   where: {
     *     // ... the filter for the FaceDetections we want to count
     *   }
     * })
    **/
    count<T extends FaceDetectionCountArgs>(
      args?: Subset<T, FaceDetectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FaceDetectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FaceDetection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaceDetectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FaceDetectionAggregateArgs>(args: Subset<T, FaceDetectionAggregateArgs>): Prisma.PrismaPromise<GetFaceDetectionAggregateType<T>>

    /**
     * Group by FaceDetection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaceDetectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FaceDetectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FaceDetectionGroupByArgs['orderBy'] }
        : { orderBy?: FaceDetectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FaceDetectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFaceDetectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FaceDetection model
   */
  readonly fields: FaceDetectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FaceDetection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FaceDetectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends FaceDetection$userArgs<ExtArgs> = {}>(args?: Subset<T, FaceDetection$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FaceDetection model
   */
  interface FaceDetectionFieldRefs {
    readonly detection_id: FieldRef<"FaceDetection", 'Int'>
    readonly userId: FieldRef<"FaceDetection", 'Int'>
    readonly imageUrl: FieldRef<"FaceDetection", 'String'>
    readonly mood: FieldRef<"FaceDetection", 'Mood'>
    readonly detectedAt: FieldRef<"FaceDetection", 'DateTime'>
    readonly createdAt: FieldRef<"FaceDetection", 'DateTime'>
    readonly updatedAt: FieldRef<"FaceDetection", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FaceDetection findUnique
   */
  export type FaceDetectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaceDetection
     */
    select?: FaceDetectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaceDetection
     */
    omit?: FaceDetectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaceDetectionInclude<ExtArgs> | null
    /**
     * Filter, which FaceDetection to fetch.
     */
    where: FaceDetectionWhereUniqueInput
  }

  /**
   * FaceDetection findUniqueOrThrow
   */
  export type FaceDetectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaceDetection
     */
    select?: FaceDetectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaceDetection
     */
    omit?: FaceDetectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaceDetectionInclude<ExtArgs> | null
    /**
     * Filter, which FaceDetection to fetch.
     */
    where: FaceDetectionWhereUniqueInput
  }

  /**
   * FaceDetection findFirst
   */
  export type FaceDetectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaceDetection
     */
    select?: FaceDetectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaceDetection
     */
    omit?: FaceDetectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaceDetectionInclude<ExtArgs> | null
    /**
     * Filter, which FaceDetection to fetch.
     */
    where?: FaceDetectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FaceDetections to fetch.
     */
    orderBy?: FaceDetectionOrderByWithRelationInput | FaceDetectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FaceDetections.
     */
    cursor?: FaceDetectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FaceDetections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FaceDetections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FaceDetections.
     */
    distinct?: FaceDetectionScalarFieldEnum | FaceDetectionScalarFieldEnum[]
  }

  /**
   * FaceDetection findFirstOrThrow
   */
  export type FaceDetectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaceDetection
     */
    select?: FaceDetectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaceDetection
     */
    omit?: FaceDetectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaceDetectionInclude<ExtArgs> | null
    /**
     * Filter, which FaceDetection to fetch.
     */
    where?: FaceDetectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FaceDetections to fetch.
     */
    orderBy?: FaceDetectionOrderByWithRelationInput | FaceDetectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FaceDetections.
     */
    cursor?: FaceDetectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FaceDetections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FaceDetections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FaceDetections.
     */
    distinct?: FaceDetectionScalarFieldEnum | FaceDetectionScalarFieldEnum[]
  }

  /**
   * FaceDetection findMany
   */
  export type FaceDetectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaceDetection
     */
    select?: FaceDetectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaceDetection
     */
    omit?: FaceDetectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaceDetectionInclude<ExtArgs> | null
    /**
     * Filter, which FaceDetections to fetch.
     */
    where?: FaceDetectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FaceDetections to fetch.
     */
    orderBy?: FaceDetectionOrderByWithRelationInput | FaceDetectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FaceDetections.
     */
    cursor?: FaceDetectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FaceDetections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FaceDetections.
     */
    skip?: number
    distinct?: FaceDetectionScalarFieldEnum | FaceDetectionScalarFieldEnum[]
  }

  /**
   * FaceDetection create
   */
  export type FaceDetectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaceDetection
     */
    select?: FaceDetectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaceDetection
     */
    omit?: FaceDetectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaceDetectionInclude<ExtArgs> | null
    /**
     * The data needed to create a FaceDetection.
     */
    data: XOR<FaceDetectionCreateInput, FaceDetectionUncheckedCreateInput>
  }

  /**
   * FaceDetection createMany
   */
  export type FaceDetectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FaceDetections.
     */
    data: FaceDetectionCreateManyInput | FaceDetectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FaceDetection createManyAndReturn
   */
  export type FaceDetectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaceDetection
     */
    select?: FaceDetectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FaceDetection
     */
    omit?: FaceDetectionOmit<ExtArgs> | null
    /**
     * The data used to create many FaceDetections.
     */
    data: FaceDetectionCreateManyInput | FaceDetectionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaceDetectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FaceDetection update
   */
  export type FaceDetectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaceDetection
     */
    select?: FaceDetectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaceDetection
     */
    omit?: FaceDetectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaceDetectionInclude<ExtArgs> | null
    /**
     * The data needed to update a FaceDetection.
     */
    data: XOR<FaceDetectionUpdateInput, FaceDetectionUncheckedUpdateInput>
    /**
     * Choose, which FaceDetection to update.
     */
    where: FaceDetectionWhereUniqueInput
  }

  /**
   * FaceDetection updateMany
   */
  export type FaceDetectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FaceDetections.
     */
    data: XOR<FaceDetectionUpdateManyMutationInput, FaceDetectionUncheckedUpdateManyInput>
    /**
     * Filter which FaceDetections to update
     */
    where?: FaceDetectionWhereInput
    /**
     * Limit how many FaceDetections to update.
     */
    limit?: number
  }

  /**
   * FaceDetection updateManyAndReturn
   */
  export type FaceDetectionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaceDetection
     */
    select?: FaceDetectionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FaceDetection
     */
    omit?: FaceDetectionOmit<ExtArgs> | null
    /**
     * The data used to update FaceDetections.
     */
    data: XOR<FaceDetectionUpdateManyMutationInput, FaceDetectionUncheckedUpdateManyInput>
    /**
     * Filter which FaceDetections to update
     */
    where?: FaceDetectionWhereInput
    /**
     * Limit how many FaceDetections to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaceDetectionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FaceDetection upsert
   */
  export type FaceDetectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaceDetection
     */
    select?: FaceDetectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaceDetection
     */
    omit?: FaceDetectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaceDetectionInclude<ExtArgs> | null
    /**
     * The filter to search for the FaceDetection to update in case it exists.
     */
    where: FaceDetectionWhereUniqueInput
    /**
     * In case the FaceDetection found by the `where` argument doesn't exist, create a new FaceDetection with this data.
     */
    create: XOR<FaceDetectionCreateInput, FaceDetectionUncheckedCreateInput>
    /**
     * In case the FaceDetection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FaceDetectionUpdateInput, FaceDetectionUncheckedUpdateInput>
  }

  /**
   * FaceDetection delete
   */
  export type FaceDetectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaceDetection
     */
    select?: FaceDetectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaceDetection
     */
    omit?: FaceDetectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaceDetectionInclude<ExtArgs> | null
    /**
     * Filter which FaceDetection to delete.
     */
    where: FaceDetectionWhereUniqueInput
  }

  /**
   * FaceDetection deleteMany
   */
  export type FaceDetectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FaceDetections to delete
     */
    where?: FaceDetectionWhereInput
    /**
     * Limit how many FaceDetections to delete.
     */
    limit?: number
  }

  /**
   * FaceDetection.user
   */
  export type FaceDetection$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * FaceDetection without action
   */
  export type FaceDetectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaceDetection
     */
    select?: FaceDetectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaceDetection
     */
    omit?: FaceDetectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaceDetectionInclude<ExtArgs> | null
  }


  /**
   * Model Journaling
   */

  export type AggregateJournaling = {
    _count: JournalingCountAggregateOutputType | null
    _avg: JournalingAvgAggregateOutputType | null
    _sum: JournalingSumAggregateOutputType | null
    _min: JournalingMinAggregateOutputType | null
    _max: JournalingMaxAggregateOutputType | null
  }

  export type JournalingAvgAggregateOutputType = {
    journal_id: number | null
    userId: number | null
  }

  export type JournalingSumAggregateOutputType = {
    journal_id: number | null
    userId: number | null
  }

  export type JournalingMinAggregateOutputType = {
    journal_id: number | null
    userId: number | null
    title: string | null
    content: string | null
    mood: $Enums.Mood | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JournalingMaxAggregateOutputType = {
    journal_id: number | null
    userId: number | null
    title: string | null
    content: string | null
    mood: $Enums.Mood | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JournalingCountAggregateOutputType = {
    journal_id: number
    userId: number
    title: number
    content: number
    mood: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JournalingAvgAggregateInputType = {
    journal_id?: true
    userId?: true
  }

  export type JournalingSumAggregateInputType = {
    journal_id?: true
    userId?: true
  }

  export type JournalingMinAggregateInputType = {
    journal_id?: true
    userId?: true
    title?: true
    content?: true
    mood?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JournalingMaxAggregateInputType = {
    journal_id?: true
    userId?: true
    title?: true
    content?: true
    mood?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JournalingCountAggregateInputType = {
    journal_id?: true
    userId?: true
    title?: true
    content?: true
    mood?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JournalingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Journaling to aggregate.
     */
    where?: JournalingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Journalings to fetch.
     */
    orderBy?: JournalingOrderByWithRelationInput | JournalingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JournalingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Journalings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Journalings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Journalings
    **/
    _count?: true | JournalingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JournalingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JournalingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JournalingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JournalingMaxAggregateInputType
  }

  export type GetJournalingAggregateType<T extends JournalingAggregateArgs> = {
        [P in keyof T & keyof AggregateJournaling]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJournaling[P]>
      : GetScalarType<T[P], AggregateJournaling[P]>
  }




  export type JournalingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JournalingWhereInput
    orderBy?: JournalingOrderByWithAggregationInput | JournalingOrderByWithAggregationInput[]
    by: JournalingScalarFieldEnum[] | JournalingScalarFieldEnum
    having?: JournalingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JournalingCountAggregateInputType | true
    _avg?: JournalingAvgAggregateInputType
    _sum?: JournalingSumAggregateInputType
    _min?: JournalingMinAggregateInputType
    _max?: JournalingMaxAggregateInputType
  }

  export type JournalingGroupByOutputType = {
    journal_id: number
    userId: number | null
    title: string
    content: string
    mood: $Enums.Mood
    createdAt: Date
    updatedAt: Date
    _count: JournalingCountAggregateOutputType | null
    _avg: JournalingAvgAggregateOutputType | null
    _sum: JournalingSumAggregateOutputType | null
    _min: JournalingMinAggregateOutputType | null
    _max: JournalingMaxAggregateOutputType | null
  }

  type GetJournalingGroupByPayload<T extends JournalingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JournalingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JournalingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JournalingGroupByOutputType[P]>
            : GetScalarType<T[P], JournalingGroupByOutputType[P]>
        }
      >
    >


  export type JournalingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    journal_id?: boolean
    userId?: boolean
    title?: boolean
    content?: boolean
    mood?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Journaling$userArgs<ExtArgs>
  }, ExtArgs["result"]["journaling"]>

  export type JournalingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    journal_id?: boolean
    userId?: boolean
    title?: boolean
    content?: boolean
    mood?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Journaling$userArgs<ExtArgs>
  }, ExtArgs["result"]["journaling"]>

  export type JournalingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    journal_id?: boolean
    userId?: boolean
    title?: boolean
    content?: boolean
    mood?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Journaling$userArgs<ExtArgs>
  }, ExtArgs["result"]["journaling"]>

  export type JournalingSelectScalar = {
    journal_id?: boolean
    userId?: boolean
    title?: boolean
    content?: boolean
    mood?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type JournalingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"journal_id" | "userId" | "title" | "content" | "mood" | "createdAt" | "updatedAt", ExtArgs["result"]["journaling"]>
  export type JournalingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Journaling$userArgs<ExtArgs>
  }
  export type JournalingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Journaling$userArgs<ExtArgs>
  }
  export type JournalingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Journaling$userArgs<ExtArgs>
  }

  export type $JournalingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Journaling"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      journal_id: number
      userId: number | null
      title: string
      content: string
      mood: $Enums.Mood
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["journaling"]>
    composites: {}
  }

  type JournalingGetPayload<S extends boolean | null | undefined | JournalingDefaultArgs> = $Result.GetResult<Prisma.$JournalingPayload, S>

  type JournalingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JournalingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JournalingCountAggregateInputType | true
    }

  export interface JournalingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Journaling'], meta: { name: 'Journaling' } }
    /**
     * Find zero or one Journaling that matches the filter.
     * @param {JournalingFindUniqueArgs} args - Arguments to find a Journaling
     * @example
     * // Get one Journaling
     * const journaling = await prisma.journaling.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JournalingFindUniqueArgs>(args: SelectSubset<T, JournalingFindUniqueArgs<ExtArgs>>): Prisma__JournalingClient<$Result.GetResult<Prisma.$JournalingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Journaling that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JournalingFindUniqueOrThrowArgs} args - Arguments to find a Journaling
     * @example
     * // Get one Journaling
     * const journaling = await prisma.journaling.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JournalingFindUniqueOrThrowArgs>(args: SelectSubset<T, JournalingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JournalingClient<$Result.GetResult<Prisma.$JournalingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Journaling that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalingFindFirstArgs} args - Arguments to find a Journaling
     * @example
     * // Get one Journaling
     * const journaling = await prisma.journaling.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JournalingFindFirstArgs>(args?: SelectSubset<T, JournalingFindFirstArgs<ExtArgs>>): Prisma__JournalingClient<$Result.GetResult<Prisma.$JournalingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Journaling that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalingFindFirstOrThrowArgs} args - Arguments to find a Journaling
     * @example
     * // Get one Journaling
     * const journaling = await prisma.journaling.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JournalingFindFirstOrThrowArgs>(args?: SelectSubset<T, JournalingFindFirstOrThrowArgs<ExtArgs>>): Prisma__JournalingClient<$Result.GetResult<Prisma.$JournalingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Journalings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Journalings
     * const journalings = await prisma.journaling.findMany()
     * 
     * // Get first 10 Journalings
     * const journalings = await prisma.journaling.findMany({ take: 10 })
     * 
     * // Only select the `journal_id`
     * const journalingWithJournal_idOnly = await prisma.journaling.findMany({ select: { journal_id: true } })
     * 
     */
    findMany<T extends JournalingFindManyArgs>(args?: SelectSubset<T, JournalingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JournalingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Journaling.
     * @param {JournalingCreateArgs} args - Arguments to create a Journaling.
     * @example
     * // Create one Journaling
     * const Journaling = await prisma.journaling.create({
     *   data: {
     *     // ... data to create a Journaling
     *   }
     * })
     * 
     */
    create<T extends JournalingCreateArgs>(args: SelectSubset<T, JournalingCreateArgs<ExtArgs>>): Prisma__JournalingClient<$Result.GetResult<Prisma.$JournalingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Journalings.
     * @param {JournalingCreateManyArgs} args - Arguments to create many Journalings.
     * @example
     * // Create many Journalings
     * const journaling = await prisma.journaling.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JournalingCreateManyArgs>(args?: SelectSubset<T, JournalingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Journalings and returns the data saved in the database.
     * @param {JournalingCreateManyAndReturnArgs} args - Arguments to create many Journalings.
     * @example
     * // Create many Journalings
     * const journaling = await prisma.journaling.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Journalings and only return the `journal_id`
     * const journalingWithJournal_idOnly = await prisma.journaling.createManyAndReturn({
     *   select: { journal_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JournalingCreateManyAndReturnArgs>(args?: SelectSubset<T, JournalingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JournalingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Journaling.
     * @param {JournalingDeleteArgs} args - Arguments to delete one Journaling.
     * @example
     * // Delete one Journaling
     * const Journaling = await prisma.journaling.delete({
     *   where: {
     *     // ... filter to delete one Journaling
     *   }
     * })
     * 
     */
    delete<T extends JournalingDeleteArgs>(args: SelectSubset<T, JournalingDeleteArgs<ExtArgs>>): Prisma__JournalingClient<$Result.GetResult<Prisma.$JournalingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Journaling.
     * @param {JournalingUpdateArgs} args - Arguments to update one Journaling.
     * @example
     * // Update one Journaling
     * const journaling = await prisma.journaling.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JournalingUpdateArgs>(args: SelectSubset<T, JournalingUpdateArgs<ExtArgs>>): Prisma__JournalingClient<$Result.GetResult<Prisma.$JournalingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Journalings.
     * @param {JournalingDeleteManyArgs} args - Arguments to filter Journalings to delete.
     * @example
     * // Delete a few Journalings
     * const { count } = await prisma.journaling.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JournalingDeleteManyArgs>(args?: SelectSubset<T, JournalingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Journalings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Journalings
     * const journaling = await prisma.journaling.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JournalingUpdateManyArgs>(args: SelectSubset<T, JournalingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Journalings and returns the data updated in the database.
     * @param {JournalingUpdateManyAndReturnArgs} args - Arguments to update many Journalings.
     * @example
     * // Update many Journalings
     * const journaling = await prisma.journaling.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Journalings and only return the `journal_id`
     * const journalingWithJournal_idOnly = await prisma.journaling.updateManyAndReturn({
     *   select: { journal_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JournalingUpdateManyAndReturnArgs>(args: SelectSubset<T, JournalingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JournalingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Journaling.
     * @param {JournalingUpsertArgs} args - Arguments to update or create a Journaling.
     * @example
     * // Update or create a Journaling
     * const journaling = await prisma.journaling.upsert({
     *   create: {
     *     // ... data to create a Journaling
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Journaling we want to update
     *   }
     * })
     */
    upsert<T extends JournalingUpsertArgs>(args: SelectSubset<T, JournalingUpsertArgs<ExtArgs>>): Prisma__JournalingClient<$Result.GetResult<Prisma.$JournalingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Journalings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalingCountArgs} args - Arguments to filter Journalings to count.
     * @example
     * // Count the number of Journalings
     * const count = await prisma.journaling.count({
     *   where: {
     *     // ... the filter for the Journalings we want to count
     *   }
     * })
    **/
    count<T extends JournalingCountArgs>(
      args?: Subset<T, JournalingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JournalingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Journaling.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JournalingAggregateArgs>(args: Subset<T, JournalingAggregateArgs>): Prisma.PrismaPromise<GetJournalingAggregateType<T>>

    /**
     * Group by Journaling.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JournalingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JournalingGroupByArgs['orderBy'] }
        : { orderBy?: JournalingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JournalingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJournalingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Journaling model
   */
  readonly fields: JournalingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Journaling.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JournalingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Journaling$userArgs<ExtArgs> = {}>(args?: Subset<T, Journaling$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Journaling model
   */
  interface JournalingFieldRefs {
    readonly journal_id: FieldRef<"Journaling", 'Int'>
    readonly userId: FieldRef<"Journaling", 'Int'>
    readonly title: FieldRef<"Journaling", 'String'>
    readonly content: FieldRef<"Journaling", 'String'>
    readonly mood: FieldRef<"Journaling", 'Mood'>
    readonly createdAt: FieldRef<"Journaling", 'DateTime'>
    readonly updatedAt: FieldRef<"Journaling", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Journaling findUnique
   */
  export type JournalingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Journaling
     */
    select?: JournalingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Journaling
     */
    omit?: JournalingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalingInclude<ExtArgs> | null
    /**
     * Filter, which Journaling to fetch.
     */
    where: JournalingWhereUniqueInput
  }

  /**
   * Journaling findUniqueOrThrow
   */
  export type JournalingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Journaling
     */
    select?: JournalingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Journaling
     */
    omit?: JournalingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalingInclude<ExtArgs> | null
    /**
     * Filter, which Journaling to fetch.
     */
    where: JournalingWhereUniqueInput
  }

  /**
   * Journaling findFirst
   */
  export type JournalingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Journaling
     */
    select?: JournalingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Journaling
     */
    omit?: JournalingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalingInclude<ExtArgs> | null
    /**
     * Filter, which Journaling to fetch.
     */
    where?: JournalingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Journalings to fetch.
     */
    orderBy?: JournalingOrderByWithRelationInput | JournalingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Journalings.
     */
    cursor?: JournalingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Journalings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Journalings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Journalings.
     */
    distinct?: JournalingScalarFieldEnum | JournalingScalarFieldEnum[]
  }

  /**
   * Journaling findFirstOrThrow
   */
  export type JournalingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Journaling
     */
    select?: JournalingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Journaling
     */
    omit?: JournalingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalingInclude<ExtArgs> | null
    /**
     * Filter, which Journaling to fetch.
     */
    where?: JournalingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Journalings to fetch.
     */
    orderBy?: JournalingOrderByWithRelationInput | JournalingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Journalings.
     */
    cursor?: JournalingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Journalings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Journalings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Journalings.
     */
    distinct?: JournalingScalarFieldEnum | JournalingScalarFieldEnum[]
  }

  /**
   * Journaling findMany
   */
  export type JournalingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Journaling
     */
    select?: JournalingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Journaling
     */
    omit?: JournalingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalingInclude<ExtArgs> | null
    /**
     * Filter, which Journalings to fetch.
     */
    where?: JournalingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Journalings to fetch.
     */
    orderBy?: JournalingOrderByWithRelationInput | JournalingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Journalings.
     */
    cursor?: JournalingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Journalings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Journalings.
     */
    skip?: number
    distinct?: JournalingScalarFieldEnum | JournalingScalarFieldEnum[]
  }

  /**
   * Journaling create
   */
  export type JournalingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Journaling
     */
    select?: JournalingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Journaling
     */
    omit?: JournalingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalingInclude<ExtArgs> | null
    /**
     * The data needed to create a Journaling.
     */
    data: XOR<JournalingCreateInput, JournalingUncheckedCreateInput>
  }

  /**
   * Journaling createMany
   */
  export type JournalingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Journalings.
     */
    data: JournalingCreateManyInput | JournalingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Journaling createManyAndReturn
   */
  export type JournalingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Journaling
     */
    select?: JournalingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Journaling
     */
    omit?: JournalingOmit<ExtArgs> | null
    /**
     * The data used to create many Journalings.
     */
    data: JournalingCreateManyInput | JournalingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Journaling update
   */
  export type JournalingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Journaling
     */
    select?: JournalingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Journaling
     */
    omit?: JournalingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalingInclude<ExtArgs> | null
    /**
     * The data needed to update a Journaling.
     */
    data: XOR<JournalingUpdateInput, JournalingUncheckedUpdateInput>
    /**
     * Choose, which Journaling to update.
     */
    where: JournalingWhereUniqueInput
  }

  /**
   * Journaling updateMany
   */
  export type JournalingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Journalings.
     */
    data: XOR<JournalingUpdateManyMutationInput, JournalingUncheckedUpdateManyInput>
    /**
     * Filter which Journalings to update
     */
    where?: JournalingWhereInput
    /**
     * Limit how many Journalings to update.
     */
    limit?: number
  }

  /**
   * Journaling updateManyAndReturn
   */
  export type JournalingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Journaling
     */
    select?: JournalingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Journaling
     */
    omit?: JournalingOmit<ExtArgs> | null
    /**
     * The data used to update Journalings.
     */
    data: XOR<JournalingUpdateManyMutationInput, JournalingUncheckedUpdateManyInput>
    /**
     * Filter which Journalings to update
     */
    where?: JournalingWhereInput
    /**
     * Limit how many Journalings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Journaling upsert
   */
  export type JournalingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Journaling
     */
    select?: JournalingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Journaling
     */
    omit?: JournalingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalingInclude<ExtArgs> | null
    /**
     * The filter to search for the Journaling to update in case it exists.
     */
    where: JournalingWhereUniqueInput
    /**
     * In case the Journaling found by the `where` argument doesn't exist, create a new Journaling with this data.
     */
    create: XOR<JournalingCreateInput, JournalingUncheckedCreateInput>
    /**
     * In case the Journaling was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JournalingUpdateInput, JournalingUncheckedUpdateInput>
  }

  /**
   * Journaling delete
   */
  export type JournalingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Journaling
     */
    select?: JournalingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Journaling
     */
    omit?: JournalingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalingInclude<ExtArgs> | null
    /**
     * Filter which Journaling to delete.
     */
    where: JournalingWhereUniqueInput
  }

  /**
   * Journaling deleteMany
   */
  export type JournalingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Journalings to delete
     */
    where?: JournalingWhereInput
    /**
     * Limit how many Journalings to delete.
     */
    limit?: number
  }

  /**
   * Journaling.user
   */
  export type Journaling$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Journaling without action
   */
  export type JournalingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Journaling
     */
    select?: JournalingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Journaling
     */
    omit?: JournalingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalingInclude<ExtArgs> | null
  }


  /**
   * Model meditation
   */

  export type AggregateMeditation = {
    _count: MeditationCountAggregateOutputType | null
    _avg: MeditationAvgAggregateOutputType | null
    _sum: MeditationSumAggregateOutputType | null
    _min: MeditationMinAggregateOutputType | null
    _max: MeditationMaxAggregateOutputType | null
  }

  export type MeditationAvgAggregateOutputType = {
    meditation_id: number | null
    duration: number | null
  }

  export type MeditationSumAggregateOutputType = {
    meditation_id: number | null
    duration: number | null
  }

  export type MeditationMinAggregateOutputType = {
    meditation_id: number | null
    title: string | null
    description: string | null
    mediaUrl: string | null
    duration: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeditationMaxAggregateOutputType = {
    meditation_id: number | null
    title: string | null
    description: string | null
    mediaUrl: string | null
    duration: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeditationCountAggregateOutputType = {
    meditation_id: number
    title: number
    description: number
    mediaUrl: number
    duration: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MeditationAvgAggregateInputType = {
    meditation_id?: true
    duration?: true
  }

  export type MeditationSumAggregateInputType = {
    meditation_id?: true
    duration?: true
  }

  export type MeditationMinAggregateInputType = {
    meditation_id?: true
    title?: true
    description?: true
    mediaUrl?: true
    duration?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeditationMaxAggregateInputType = {
    meditation_id?: true
    title?: true
    description?: true
    mediaUrl?: true
    duration?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeditationCountAggregateInputType = {
    meditation_id?: true
    title?: true
    description?: true
    mediaUrl?: true
    duration?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MeditationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which meditation to aggregate.
     */
    where?: meditationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of meditations to fetch.
     */
    orderBy?: meditationOrderByWithRelationInput | meditationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: meditationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` meditations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` meditations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned meditations
    **/
    _count?: true | MeditationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeditationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeditationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeditationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeditationMaxAggregateInputType
  }

  export type GetMeditationAggregateType<T extends MeditationAggregateArgs> = {
        [P in keyof T & keyof AggregateMeditation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeditation[P]>
      : GetScalarType<T[P], AggregateMeditation[P]>
  }




  export type meditationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: meditationWhereInput
    orderBy?: meditationOrderByWithAggregationInput | meditationOrderByWithAggregationInput[]
    by: MeditationScalarFieldEnum[] | MeditationScalarFieldEnum
    having?: meditationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeditationCountAggregateInputType | true
    _avg?: MeditationAvgAggregateInputType
    _sum?: MeditationSumAggregateInputType
    _min?: MeditationMinAggregateInputType
    _max?: MeditationMaxAggregateInputType
  }

  export type MeditationGroupByOutputType = {
    meditation_id: number
    title: string
    description: string
    mediaUrl: string
    duration: number
    createdAt: Date
    updatedAt: Date
    _count: MeditationCountAggregateOutputType | null
    _avg: MeditationAvgAggregateOutputType | null
    _sum: MeditationSumAggregateOutputType | null
    _min: MeditationMinAggregateOutputType | null
    _max: MeditationMaxAggregateOutputType | null
  }

  type GetMeditationGroupByPayload<T extends meditationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MeditationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeditationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeditationGroupByOutputType[P]>
            : GetScalarType<T[P], MeditationGroupByOutputType[P]>
        }
      >
    >


  export type meditationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    meditation_id?: boolean
    title?: boolean
    description?: boolean
    mediaUrl?: boolean
    duration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userMeditations?: boolean | meditation$userMeditationsArgs<ExtArgs>
    _count?: boolean | MeditationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meditation"]>

  export type meditationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    meditation_id?: boolean
    title?: boolean
    description?: boolean
    mediaUrl?: boolean
    duration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["meditation"]>

  export type meditationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    meditation_id?: boolean
    title?: boolean
    description?: boolean
    mediaUrl?: boolean
    duration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["meditation"]>

  export type meditationSelectScalar = {
    meditation_id?: boolean
    title?: boolean
    description?: boolean
    mediaUrl?: boolean
    duration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type meditationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"meditation_id" | "title" | "description" | "mediaUrl" | "duration" | "createdAt" | "updatedAt", ExtArgs["result"]["meditation"]>
  export type meditationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userMeditations?: boolean | meditation$userMeditationsArgs<ExtArgs>
    _count?: boolean | MeditationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type meditationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type meditationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $meditationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "meditation"
    objects: {
      userMeditations: Prisma.$userMeditationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      meditation_id: number
      title: string
      description: string
      mediaUrl: string
      duration: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["meditation"]>
    composites: {}
  }

  type meditationGetPayload<S extends boolean | null | undefined | meditationDefaultArgs> = $Result.GetResult<Prisma.$meditationPayload, S>

  type meditationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<meditationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MeditationCountAggregateInputType | true
    }

  export interface meditationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['meditation'], meta: { name: 'meditation' } }
    /**
     * Find zero or one Meditation that matches the filter.
     * @param {meditationFindUniqueArgs} args - Arguments to find a Meditation
     * @example
     * // Get one Meditation
     * const meditation = await prisma.meditation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends meditationFindUniqueArgs>(args: SelectSubset<T, meditationFindUniqueArgs<ExtArgs>>): Prisma__meditationClient<$Result.GetResult<Prisma.$meditationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Meditation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {meditationFindUniqueOrThrowArgs} args - Arguments to find a Meditation
     * @example
     * // Get one Meditation
     * const meditation = await prisma.meditation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends meditationFindUniqueOrThrowArgs>(args: SelectSubset<T, meditationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__meditationClient<$Result.GetResult<Prisma.$meditationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Meditation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {meditationFindFirstArgs} args - Arguments to find a Meditation
     * @example
     * // Get one Meditation
     * const meditation = await prisma.meditation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends meditationFindFirstArgs>(args?: SelectSubset<T, meditationFindFirstArgs<ExtArgs>>): Prisma__meditationClient<$Result.GetResult<Prisma.$meditationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Meditation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {meditationFindFirstOrThrowArgs} args - Arguments to find a Meditation
     * @example
     * // Get one Meditation
     * const meditation = await prisma.meditation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends meditationFindFirstOrThrowArgs>(args?: SelectSubset<T, meditationFindFirstOrThrowArgs<ExtArgs>>): Prisma__meditationClient<$Result.GetResult<Prisma.$meditationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Meditations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {meditationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Meditations
     * const meditations = await prisma.meditation.findMany()
     * 
     * // Get first 10 Meditations
     * const meditations = await prisma.meditation.findMany({ take: 10 })
     * 
     * // Only select the `meditation_id`
     * const meditationWithMeditation_idOnly = await prisma.meditation.findMany({ select: { meditation_id: true } })
     * 
     */
    findMany<T extends meditationFindManyArgs>(args?: SelectSubset<T, meditationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$meditationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Meditation.
     * @param {meditationCreateArgs} args - Arguments to create a Meditation.
     * @example
     * // Create one Meditation
     * const Meditation = await prisma.meditation.create({
     *   data: {
     *     // ... data to create a Meditation
     *   }
     * })
     * 
     */
    create<T extends meditationCreateArgs>(args: SelectSubset<T, meditationCreateArgs<ExtArgs>>): Prisma__meditationClient<$Result.GetResult<Prisma.$meditationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Meditations.
     * @param {meditationCreateManyArgs} args - Arguments to create many Meditations.
     * @example
     * // Create many Meditations
     * const meditation = await prisma.meditation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends meditationCreateManyArgs>(args?: SelectSubset<T, meditationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Meditations and returns the data saved in the database.
     * @param {meditationCreateManyAndReturnArgs} args - Arguments to create many Meditations.
     * @example
     * // Create many Meditations
     * const meditation = await prisma.meditation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Meditations and only return the `meditation_id`
     * const meditationWithMeditation_idOnly = await prisma.meditation.createManyAndReturn({
     *   select: { meditation_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends meditationCreateManyAndReturnArgs>(args?: SelectSubset<T, meditationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$meditationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Meditation.
     * @param {meditationDeleteArgs} args - Arguments to delete one Meditation.
     * @example
     * // Delete one Meditation
     * const Meditation = await prisma.meditation.delete({
     *   where: {
     *     // ... filter to delete one Meditation
     *   }
     * })
     * 
     */
    delete<T extends meditationDeleteArgs>(args: SelectSubset<T, meditationDeleteArgs<ExtArgs>>): Prisma__meditationClient<$Result.GetResult<Prisma.$meditationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Meditation.
     * @param {meditationUpdateArgs} args - Arguments to update one Meditation.
     * @example
     * // Update one Meditation
     * const meditation = await prisma.meditation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends meditationUpdateArgs>(args: SelectSubset<T, meditationUpdateArgs<ExtArgs>>): Prisma__meditationClient<$Result.GetResult<Prisma.$meditationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Meditations.
     * @param {meditationDeleteManyArgs} args - Arguments to filter Meditations to delete.
     * @example
     * // Delete a few Meditations
     * const { count } = await prisma.meditation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends meditationDeleteManyArgs>(args?: SelectSubset<T, meditationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Meditations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {meditationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Meditations
     * const meditation = await prisma.meditation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends meditationUpdateManyArgs>(args: SelectSubset<T, meditationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Meditations and returns the data updated in the database.
     * @param {meditationUpdateManyAndReturnArgs} args - Arguments to update many Meditations.
     * @example
     * // Update many Meditations
     * const meditation = await prisma.meditation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Meditations and only return the `meditation_id`
     * const meditationWithMeditation_idOnly = await prisma.meditation.updateManyAndReturn({
     *   select: { meditation_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends meditationUpdateManyAndReturnArgs>(args: SelectSubset<T, meditationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$meditationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Meditation.
     * @param {meditationUpsertArgs} args - Arguments to update or create a Meditation.
     * @example
     * // Update or create a Meditation
     * const meditation = await prisma.meditation.upsert({
     *   create: {
     *     // ... data to create a Meditation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Meditation we want to update
     *   }
     * })
     */
    upsert<T extends meditationUpsertArgs>(args: SelectSubset<T, meditationUpsertArgs<ExtArgs>>): Prisma__meditationClient<$Result.GetResult<Prisma.$meditationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Meditations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {meditationCountArgs} args - Arguments to filter Meditations to count.
     * @example
     * // Count the number of Meditations
     * const count = await prisma.meditation.count({
     *   where: {
     *     // ... the filter for the Meditations we want to count
     *   }
     * })
    **/
    count<T extends meditationCountArgs>(
      args?: Subset<T, meditationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeditationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Meditation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeditationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeditationAggregateArgs>(args: Subset<T, MeditationAggregateArgs>): Prisma.PrismaPromise<GetMeditationAggregateType<T>>

    /**
     * Group by Meditation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {meditationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends meditationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: meditationGroupByArgs['orderBy'] }
        : { orderBy?: meditationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, meditationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeditationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the meditation model
   */
  readonly fields: meditationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for meditation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__meditationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userMeditations<T extends meditation$userMeditationsArgs<ExtArgs> = {}>(args?: Subset<T, meditation$userMeditationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userMeditationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the meditation model
   */
  interface meditationFieldRefs {
    readonly meditation_id: FieldRef<"meditation", 'Int'>
    readonly title: FieldRef<"meditation", 'String'>
    readonly description: FieldRef<"meditation", 'String'>
    readonly mediaUrl: FieldRef<"meditation", 'String'>
    readonly duration: FieldRef<"meditation", 'Int'>
    readonly createdAt: FieldRef<"meditation", 'DateTime'>
    readonly updatedAt: FieldRef<"meditation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * meditation findUnique
   */
  export type meditationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the meditation
     */
    select?: meditationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the meditation
     */
    omit?: meditationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: meditationInclude<ExtArgs> | null
    /**
     * Filter, which meditation to fetch.
     */
    where: meditationWhereUniqueInput
  }

  /**
   * meditation findUniqueOrThrow
   */
  export type meditationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the meditation
     */
    select?: meditationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the meditation
     */
    omit?: meditationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: meditationInclude<ExtArgs> | null
    /**
     * Filter, which meditation to fetch.
     */
    where: meditationWhereUniqueInput
  }

  /**
   * meditation findFirst
   */
  export type meditationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the meditation
     */
    select?: meditationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the meditation
     */
    omit?: meditationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: meditationInclude<ExtArgs> | null
    /**
     * Filter, which meditation to fetch.
     */
    where?: meditationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of meditations to fetch.
     */
    orderBy?: meditationOrderByWithRelationInput | meditationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for meditations.
     */
    cursor?: meditationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` meditations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` meditations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of meditations.
     */
    distinct?: MeditationScalarFieldEnum | MeditationScalarFieldEnum[]
  }

  /**
   * meditation findFirstOrThrow
   */
  export type meditationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the meditation
     */
    select?: meditationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the meditation
     */
    omit?: meditationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: meditationInclude<ExtArgs> | null
    /**
     * Filter, which meditation to fetch.
     */
    where?: meditationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of meditations to fetch.
     */
    orderBy?: meditationOrderByWithRelationInput | meditationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for meditations.
     */
    cursor?: meditationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` meditations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` meditations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of meditations.
     */
    distinct?: MeditationScalarFieldEnum | MeditationScalarFieldEnum[]
  }

  /**
   * meditation findMany
   */
  export type meditationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the meditation
     */
    select?: meditationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the meditation
     */
    omit?: meditationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: meditationInclude<ExtArgs> | null
    /**
     * Filter, which meditations to fetch.
     */
    where?: meditationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of meditations to fetch.
     */
    orderBy?: meditationOrderByWithRelationInput | meditationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing meditations.
     */
    cursor?: meditationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` meditations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` meditations.
     */
    skip?: number
    distinct?: MeditationScalarFieldEnum | MeditationScalarFieldEnum[]
  }

  /**
   * meditation create
   */
  export type meditationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the meditation
     */
    select?: meditationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the meditation
     */
    omit?: meditationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: meditationInclude<ExtArgs> | null
    /**
     * The data needed to create a meditation.
     */
    data: XOR<meditationCreateInput, meditationUncheckedCreateInput>
  }

  /**
   * meditation createMany
   */
  export type meditationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many meditations.
     */
    data: meditationCreateManyInput | meditationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * meditation createManyAndReturn
   */
  export type meditationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the meditation
     */
    select?: meditationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the meditation
     */
    omit?: meditationOmit<ExtArgs> | null
    /**
     * The data used to create many meditations.
     */
    data: meditationCreateManyInput | meditationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * meditation update
   */
  export type meditationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the meditation
     */
    select?: meditationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the meditation
     */
    omit?: meditationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: meditationInclude<ExtArgs> | null
    /**
     * The data needed to update a meditation.
     */
    data: XOR<meditationUpdateInput, meditationUncheckedUpdateInput>
    /**
     * Choose, which meditation to update.
     */
    where: meditationWhereUniqueInput
  }

  /**
   * meditation updateMany
   */
  export type meditationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update meditations.
     */
    data: XOR<meditationUpdateManyMutationInput, meditationUncheckedUpdateManyInput>
    /**
     * Filter which meditations to update
     */
    where?: meditationWhereInput
    /**
     * Limit how many meditations to update.
     */
    limit?: number
  }

  /**
   * meditation updateManyAndReturn
   */
  export type meditationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the meditation
     */
    select?: meditationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the meditation
     */
    omit?: meditationOmit<ExtArgs> | null
    /**
     * The data used to update meditations.
     */
    data: XOR<meditationUpdateManyMutationInput, meditationUncheckedUpdateManyInput>
    /**
     * Filter which meditations to update
     */
    where?: meditationWhereInput
    /**
     * Limit how many meditations to update.
     */
    limit?: number
  }

  /**
   * meditation upsert
   */
  export type meditationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the meditation
     */
    select?: meditationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the meditation
     */
    omit?: meditationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: meditationInclude<ExtArgs> | null
    /**
     * The filter to search for the meditation to update in case it exists.
     */
    where: meditationWhereUniqueInput
    /**
     * In case the meditation found by the `where` argument doesn't exist, create a new meditation with this data.
     */
    create: XOR<meditationCreateInput, meditationUncheckedCreateInput>
    /**
     * In case the meditation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<meditationUpdateInput, meditationUncheckedUpdateInput>
  }

  /**
   * meditation delete
   */
  export type meditationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the meditation
     */
    select?: meditationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the meditation
     */
    omit?: meditationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: meditationInclude<ExtArgs> | null
    /**
     * Filter which meditation to delete.
     */
    where: meditationWhereUniqueInput
  }

  /**
   * meditation deleteMany
   */
  export type meditationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which meditations to delete
     */
    where?: meditationWhereInput
    /**
     * Limit how many meditations to delete.
     */
    limit?: number
  }

  /**
   * meditation.userMeditations
   */
  export type meditation$userMeditationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userMeditation
     */
    select?: userMeditationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userMeditation
     */
    omit?: userMeditationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userMeditationInclude<ExtArgs> | null
    where?: userMeditationWhereInput
    orderBy?: userMeditationOrderByWithRelationInput | userMeditationOrderByWithRelationInput[]
    cursor?: userMeditationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserMeditationScalarFieldEnum | UserMeditationScalarFieldEnum[]
  }

  /**
   * meditation without action
   */
  export type meditationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the meditation
     */
    select?: meditationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the meditation
     */
    omit?: meditationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: meditationInclude<ExtArgs> | null
  }


  /**
   * Model userMeditation
   */

  export type AggregateUserMeditation = {
    _count: UserMeditationCountAggregateOutputType | null
    _avg: UserMeditationAvgAggregateOutputType | null
    _sum: UserMeditationSumAggregateOutputType | null
    _min: UserMeditationMinAggregateOutputType | null
    _max: UserMeditationMaxAggregateOutputType | null
  }

  export type UserMeditationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    meditationId: number | null
  }

  export type UserMeditationSumAggregateOutputType = {
    id: number | null
    userId: number | null
    meditationId: number | null
  }

  export type UserMeditationMinAggregateOutputType = {
    id: number | null
    userId: number | null
    meditationId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMeditationMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    meditationId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMeditationCountAggregateOutputType = {
    id: number
    userId: number
    meditationId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMeditationAvgAggregateInputType = {
    id?: true
    userId?: true
    meditationId?: true
  }

  export type UserMeditationSumAggregateInputType = {
    id?: true
    userId?: true
    meditationId?: true
  }

  export type UserMeditationMinAggregateInputType = {
    id?: true
    userId?: true
    meditationId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMeditationMaxAggregateInputType = {
    id?: true
    userId?: true
    meditationId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMeditationCountAggregateInputType = {
    id?: true
    userId?: true
    meditationId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserMeditationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which userMeditation to aggregate.
     */
    where?: userMeditationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userMeditations to fetch.
     */
    orderBy?: userMeditationOrderByWithRelationInput | userMeditationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userMeditationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userMeditations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userMeditations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned userMeditations
    **/
    _count?: true | UserMeditationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserMeditationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserMeditationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMeditationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMeditationMaxAggregateInputType
  }

  export type GetUserMeditationAggregateType<T extends UserMeditationAggregateArgs> = {
        [P in keyof T & keyof AggregateUserMeditation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserMeditation[P]>
      : GetScalarType<T[P], AggregateUserMeditation[P]>
  }




  export type userMeditationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userMeditationWhereInput
    orderBy?: userMeditationOrderByWithAggregationInput | userMeditationOrderByWithAggregationInput[]
    by: UserMeditationScalarFieldEnum[] | UserMeditationScalarFieldEnum
    having?: userMeditationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserMeditationCountAggregateInputType | true
    _avg?: UserMeditationAvgAggregateInputType
    _sum?: UserMeditationSumAggregateInputType
    _min?: UserMeditationMinAggregateInputType
    _max?: UserMeditationMaxAggregateInputType
  }

  export type UserMeditationGroupByOutputType = {
    id: number
    userId: number | null
    meditationId: number | null
    createdAt: Date
    updatedAt: Date
    _count: UserMeditationCountAggregateOutputType | null
    _avg: UserMeditationAvgAggregateOutputType | null
    _sum: UserMeditationSumAggregateOutputType | null
    _min: UserMeditationMinAggregateOutputType | null
    _max: UserMeditationMaxAggregateOutputType | null
  }

  type GetUserMeditationGroupByPayload<T extends userMeditationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserMeditationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserMeditationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserMeditationGroupByOutputType[P]>
            : GetScalarType<T[P], UserMeditationGroupByOutputType[P]>
        }
      >
    >


  export type userMeditationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    meditationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | userMeditation$userArgs<ExtArgs>
    meditation?: boolean | userMeditation$meditationArgs<ExtArgs>
  }, ExtArgs["result"]["userMeditation"]>

  export type userMeditationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    meditationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | userMeditation$userArgs<ExtArgs>
    meditation?: boolean | userMeditation$meditationArgs<ExtArgs>
  }, ExtArgs["result"]["userMeditation"]>

  export type userMeditationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    meditationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | userMeditation$userArgs<ExtArgs>
    meditation?: boolean | userMeditation$meditationArgs<ExtArgs>
  }, ExtArgs["result"]["userMeditation"]>

  export type userMeditationSelectScalar = {
    id?: boolean
    userId?: boolean
    meditationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type userMeditationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "meditationId" | "createdAt" | "updatedAt", ExtArgs["result"]["userMeditation"]>
  export type userMeditationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userMeditation$userArgs<ExtArgs>
    meditation?: boolean | userMeditation$meditationArgs<ExtArgs>
  }
  export type userMeditationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userMeditation$userArgs<ExtArgs>
    meditation?: boolean | userMeditation$meditationArgs<ExtArgs>
  }
  export type userMeditationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userMeditation$userArgs<ExtArgs>
    meditation?: boolean | userMeditation$meditationArgs<ExtArgs>
  }

  export type $userMeditationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "userMeditation"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      meditation: Prisma.$meditationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number | null
      meditationId: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userMeditation"]>
    composites: {}
  }

  type userMeditationGetPayload<S extends boolean | null | undefined | userMeditationDefaultArgs> = $Result.GetResult<Prisma.$userMeditationPayload, S>

  type userMeditationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<userMeditationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserMeditationCountAggregateInputType | true
    }

  export interface userMeditationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['userMeditation'], meta: { name: 'userMeditation' } }
    /**
     * Find zero or one UserMeditation that matches the filter.
     * @param {userMeditationFindUniqueArgs} args - Arguments to find a UserMeditation
     * @example
     * // Get one UserMeditation
     * const userMeditation = await prisma.userMeditation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userMeditationFindUniqueArgs>(args: SelectSubset<T, userMeditationFindUniqueArgs<ExtArgs>>): Prisma__userMeditationClient<$Result.GetResult<Prisma.$userMeditationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserMeditation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {userMeditationFindUniqueOrThrowArgs} args - Arguments to find a UserMeditation
     * @example
     * // Get one UserMeditation
     * const userMeditation = await prisma.userMeditation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userMeditationFindUniqueOrThrowArgs>(args: SelectSubset<T, userMeditationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userMeditationClient<$Result.GetResult<Prisma.$userMeditationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserMeditation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userMeditationFindFirstArgs} args - Arguments to find a UserMeditation
     * @example
     * // Get one UserMeditation
     * const userMeditation = await prisma.userMeditation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userMeditationFindFirstArgs>(args?: SelectSubset<T, userMeditationFindFirstArgs<ExtArgs>>): Prisma__userMeditationClient<$Result.GetResult<Prisma.$userMeditationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserMeditation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userMeditationFindFirstOrThrowArgs} args - Arguments to find a UserMeditation
     * @example
     * // Get one UserMeditation
     * const userMeditation = await prisma.userMeditation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userMeditationFindFirstOrThrowArgs>(args?: SelectSubset<T, userMeditationFindFirstOrThrowArgs<ExtArgs>>): Prisma__userMeditationClient<$Result.GetResult<Prisma.$userMeditationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserMeditations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userMeditationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserMeditations
     * const userMeditations = await prisma.userMeditation.findMany()
     * 
     * // Get first 10 UserMeditations
     * const userMeditations = await prisma.userMeditation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userMeditationWithIdOnly = await prisma.userMeditation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends userMeditationFindManyArgs>(args?: SelectSubset<T, userMeditationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userMeditationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserMeditation.
     * @param {userMeditationCreateArgs} args - Arguments to create a UserMeditation.
     * @example
     * // Create one UserMeditation
     * const UserMeditation = await prisma.userMeditation.create({
     *   data: {
     *     // ... data to create a UserMeditation
     *   }
     * })
     * 
     */
    create<T extends userMeditationCreateArgs>(args: SelectSubset<T, userMeditationCreateArgs<ExtArgs>>): Prisma__userMeditationClient<$Result.GetResult<Prisma.$userMeditationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserMeditations.
     * @param {userMeditationCreateManyArgs} args - Arguments to create many UserMeditations.
     * @example
     * // Create many UserMeditations
     * const userMeditation = await prisma.userMeditation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userMeditationCreateManyArgs>(args?: SelectSubset<T, userMeditationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserMeditations and returns the data saved in the database.
     * @param {userMeditationCreateManyAndReturnArgs} args - Arguments to create many UserMeditations.
     * @example
     * // Create many UserMeditations
     * const userMeditation = await prisma.userMeditation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserMeditations and only return the `id`
     * const userMeditationWithIdOnly = await prisma.userMeditation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends userMeditationCreateManyAndReturnArgs>(args?: SelectSubset<T, userMeditationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userMeditationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserMeditation.
     * @param {userMeditationDeleteArgs} args - Arguments to delete one UserMeditation.
     * @example
     * // Delete one UserMeditation
     * const UserMeditation = await prisma.userMeditation.delete({
     *   where: {
     *     // ... filter to delete one UserMeditation
     *   }
     * })
     * 
     */
    delete<T extends userMeditationDeleteArgs>(args: SelectSubset<T, userMeditationDeleteArgs<ExtArgs>>): Prisma__userMeditationClient<$Result.GetResult<Prisma.$userMeditationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserMeditation.
     * @param {userMeditationUpdateArgs} args - Arguments to update one UserMeditation.
     * @example
     * // Update one UserMeditation
     * const userMeditation = await prisma.userMeditation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userMeditationUpdateArgs>(args: SelectSubset<T, userMeditationUpdateArgs<ExtArgs>>): Prisma__userMeditationClient<$Result.GetResult<Prisma.$userMeditationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserMeditations.
     * @param {userMeditationDeleteManyArgs} args - Arguments to filter UserMeditations to delete.
     * @example
     * // Delete a few UserMeditations
     * const { count } = await prisma.userMeditation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userMeditationDeleteManyArgs>(args?: SelectSubset<T, userMeditationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserMeditations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userMeditationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserMeditations
     * const userMeditation = await prisma.userMeditation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userMeditationUpdateManyArgs>(args: SelectSubset<T, userMeditationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserMeditations and returns the data updated in the database.
     * @param {userMeditationUpdateManyAndReturnArgs} args - Arguments to update many UserMeditations.
     * @example
     * // Update many UserMeditations
     * const userMeditation = await prisma.userMeditation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserMeditations and only return the `id`
     * const userMeditationWithIdOnly = await prisma.userMeditation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends userMeditationUpdateManyAndReturnArgs>(args: SelectSubset<T, userMeditationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userMeditationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserMeditation.
     * @param {userMeditationUpsertArgs} args - Arguments to update or create a UserMeditation.
     * @example
     * // Update or create a UserMeditation
     * const userMeditation = await prisma.userMeditation.upsert({
     *   create: {
     *     // ... data to create a UserMeditation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserMeditation we want to update
     *   }
     * })
     */
    upsert<T extends userMeditationUpsertArgs>(args: SelectSubset<T, userMeditationUpsertArgs<ExtArgs>>): Prisma__userMeditationClient<$Result.GetResult<Prisma.$userMeditationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserMeditations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userMeditationCountArgs} args - Arguments to filter UserMeditations to count.
     * @example
     * // Count the number of UserMeditations
     * const count = await prisma.userMeditation.count({
     *   where: {
     *     // ... the filter for the UserMeditations we want to count
     *   }
     * })
    **/
    count<T extends userMeditationCountArgs>(
      args?: Subset<T, userMeditationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserMeditationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserMeditation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserMeditationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserMeditationAggregateArgs>(args: Subset<T, UserMeditationAggregateArgs>): Prisma.PrismaPromise<GetUserMeditationAggregateType<T>>

    /**
     * Group by UserMeditation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userMeditationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userMeditationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userMeditationGroupByArgs['orderBy'] }
        : { orderBy?: userMeditationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userMeditationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserMeditationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the userMeditation model
   */
  readonly fields: userMeditationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for userMeditation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userMeditationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userMeditation$userArgs<ExtArgs> = {}>(args?: Subset<T, userMeditation$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    meditation<T extends userMeditation$meditationArgs<ExtArgs> = {}>(args?: Subset<T, userMeditation$meditationArgs<ExtArgs>>): Prisma__meditationClient<$Result.GetResult<Prisma.$meditationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the userMeditation model
   */
  interface userMeditationFieldRefs {
    readonly id: FieldRef<"userMeditation", 'Int'>
    readonly userId: FieldRef<"userMeditation", 'Int'>
    readonly meditationId: FieldRef<"userMeditation", 'Int'>
    readonly createdAt: FieldRef<"userMeditation", 'DateTime'>
    readonly updatedAt: FieldRef<"userMeditation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * userMeditation findUnique
   */
  export type userMeditationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userMeditation
     */
    select?: userMeditationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userMeditation
     */
    omit?: userMeditationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userMeditationInclude<ExtArgs> | null
    /**
     * Filter, which userMeditation to fetch.
     */
    where: userMeditationWhereUniqueInput
  }

  /**
   * userMeditation findUniqueOrThrow
   */
  export type userMeditationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userMeditation
     */
    select?: userMeditationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userMeditation
     */
    omit?: userMeditationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userMeditationInclude<ExtArgs> | null
    /**
     * Filter, which userMeditation to fetch.
     */
    where: userMeditationWhereUniqueInput
  }

  /**
   * userMeditation findFirst
   */
  export type userMeditationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userMeditation
     */
    select?: userMeditationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userMeditation
     */
    omit?: userMeditationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userMeditationInclude<ExtArgs> | null
    /**
     * Filter, which userMeditation to fetch.
     */
    where?: userMeditationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userMeditations to fetch.
     */
    orderBy?: userMeditationOrderByWithRelationInput | userMeditationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userMeditations.
     */
    cursor?: userMeditationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userMeditations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userMeditations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userMeditations.
     */
    distinct?: UserMeditationScalarFieldEnum | UserMeditationScalarFieldEnum[]
  }

  /**
   * userMeditation findFirstOrThrow
   */
  export type userMeditationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userMeditation
     */
    select?: userMeditationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userMeditation
     */
    omit?: userMeditationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userMeditationInclude<ExtArgs> | null
    /**
     * Filter, which userMeditation to fetch.
     */
    where?: userMeditationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userMeditations to fetch.
     */
    orderBy?: userMeditationOrderByWithRelationInput | userMeditationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userMeditations.
     */
    cursor?: userMeditationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userMeditations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userMeditations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userMeditations.
     */
    distinct?: UserMeditationScalarFieldEnum | UserMeditationScalarFieldEnum[]
  }

  /**
   * userMeditation findMany
   */
  export type userMeditationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userMeditation
     */
    select?: userMeditationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userMeditation
     */
    omit?: userMeditationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userMeditationInclude<ExtArgs> | null
    /**
     * Filter, which userMeditations to fetch.
     */
    where?: userMeditationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userMeditations to fetch.
     */
    orderBy?: userMeditationOrderByWithRelationInput | userMeditationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing userMeditations.
     */
    cursor?: userMeditationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userMeditations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userMeditations.
     */
    skip?: number
    distinct?: UserMeditationScalarFieldEnum | UserMeditationScalarFieldEnum[]
  }

  /**
   * userMeditation create
   */
  export type userMeditationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userMeditation
     */
    select?: userMeditationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userMeditation
     */
    omit?: userMeditationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userMeditationInclude<ExtArgs> | null
    /**
     * The data needed to create a userMeditation.
     */
    data: XOR<userMeditationCreateInput, userMeditationUncheckedCreateInput>
  }

  /**
   * userMeditation createMany
   */
  export type userMeditationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many userMeditations.
     */
    data: userMeditationCreateManyInput | userMeditationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * userMeditation createManyAndReturn
   */
  export type userMeditationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userMeditation
     */
    select?: userMeditationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the userMeditation
     */
    omit?: userMeditationOmit<ExtArgs> | null
    /**
     * The data used to create many userMeditations.
     */
    data: userMeditationCreateManyInput | userMeditationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userMeditationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * userMeditation update
   */
  export type userMeditationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userMeditation
     */
    select?: userMeditationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userMeditation
     */
    omit?: userMeditationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userMeditationInclude<ExtArgs> | null
    /**
     * The data needed to update a userMeditation.
     */
    data: XOR<userMeditationUpdateInput, userMeditationUncheckedUpdateInput>
    /**
     * Choose, which userMeditation to update.
     */
    where: userMeditationWhereUniqueInput
  }

  /**
   * userMeditation updateMany
   */
  export type userMeditationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update userMeditations.
     */
    data: XOR<userMeditationUpdateManyMutationInput, userMeditationUncheckedUpdateManyInput>
    /**
     * Filter which userMeditations to update
     */
    where?: userMeditationWhereInput
    /**
     * Limit how many userMeditations to update.
     */
    limit?: number
  }

  /**
   * userMeditation updateManyAndReturn
   */
  export type userMeditationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userMeditation
     */
    select?: userMeditationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the userMeditation
     */
    omit?: userMeditationOmit<ExtArgs> | null
    /**
     * The data used to update userMeditations.
     */
    data: XOR<userMeditationUpdateManyMutationInput, userMeditationUncheckedUpdateManyInput>
    /**
     * Filter which userMeditations to update
     */
    where?: userMeditationWhereInput
    /**
     * Limit how many userMeditations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userMeditationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * userMeditation upsert
   */
  export type userMeditationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userMeditation
     */
    select?: userMeditationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userMeditation
     */
    omit?: userMeditationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userMeditationInclude<ExtArgs> | null
    /**
     * The filter to search for the userMeditation to update in case it exists.
     */
    where: userMeditationWhereUniqueInput
    /**
     * In case the userMeditation found by the `where` argument doesn't exist, create a new userMeditation with this data.
     */
    create: XOR<userMeditationCreateInput, userMeditationUncheckedCreateInput>
    /**
     * In case the userMeditation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userMeditationUpdateInput, userMeditationUncheckedUpdateInput>
  }

  /**
   * userMeditation delete
   */
  export type userMeditationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userMeditation
     */
    select?: userMeditationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userMeditation
     */
    omit?: userMeditationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userMeditationInclude<ExtArgs> | null
    /**
     * Filter which userMeditation to delete.
     */
    where: userMeditationWhereUniqueInput
  }

  /**
   * userMeditation deleteMany
   */
  export type userMeditationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which userMeditations to delete
     */
    where?: userMeditationWhereInput
    /**
     * Limit how many userMeditations to delete.
     */
    limit?: number
  }

  /**
   * userMeditation.user
   */
  export type userMeditation$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * userMeditation.meditation
   */
  export type userMeditation$meditationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the meditation
     */
    select?: meditationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the meditation
     */
    omit?: meditationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: meditationInclude<ExtArgs> | null
    where?: meditationWhereInput
  }

  /**
   * userMeditation without action
   */
  export type userMeditationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userMeditation
     */
    select?: userMeditationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the userMeditation
     */
    omit?: userMeditationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userMeditationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    user_id: 'user_id',
    first_name: 'first_name',
    last_name: 'last_name',
    email: 'email',
    phone_number: 'phone_number',
    password: 'password',
    created_at: 'created_at',
    verifiedAt: 'verifiedAt',
    updated_at: 'updated_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SystemLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    ipAddress: 'ipAddress',
    device: 'device',
    action: 'action',
    method: 'method',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SystemLogScalarFieldEnum = (typeof SystemLogScalarFieldEnum)[keyof typeof SystemLogScalarFieldEnum]


  export const FaceDetectionScalarFieldEnum: {
    detection_id: 'detection_id',
    userId: 'userId',
    imageUrl: 'imageUrl',
    mood: 'mood',
    detectedAt: 'detectedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FaceDetectionScalarFieldEnum = (typeof FaceDetectionScalarFieldEnum)[keyof typeof FaceDetectionScalarFieldEnum]


  export const JournalingScalarFieldEnum: {
    journal_id: 'journal_id',
    userId: 'userId',
    title: 'title',
    content: 'content',
    mood: 'mood',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JournalingScalarFieldEnum = (typeof JournalingScalarFieldEnum)[keyof typeof JournalingScalarFieldEnum]


  export const MeditationScalarFieldEnum: {
    meditation_id: 'meditation_id',
    title: 'title',
    description: 'description',
    mediaUrl: 'mediaUrl',
    duration: 'duration',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MeditationScalarFieldEnum = (typeof MeditationScalarFieldEnum)[keyof typeof MeditationScalarFieldEnum]


  export const UserMeditationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    meditationId: 'meditationId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserMeditationScalarFieldEnum = (typeof UserMeditationScalarFieldEnum)[keyof typeof UserMeditationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Mood'
   */
  export type EnumMoodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Mood'>
    


  /**
   * Reference to a field of type 'Mood[]'
   */
  export type ListEnumMoodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Mood[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    user_id?: IntFilter<"User"> | number
    first_name?: StringFilter<"User"> | string
    last_name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phone_number?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    created_at?: DateTimeFilter<"User"> | Date | string
    verifiedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    updated_at?: DateTimeFilter<"User"> | Date | string
    logins?: SystemLogListRelationFilter
    detections?: FaceDetectionListRelationFilter
    journals?: JournalingListRelationFilter
    userMeditations?: UserMeditationListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    user_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    updated_at?: SortOrder
    logins?: SystemLogOrderByRelationAggregateInput
    detections?: FaceDetectionOrderByRelationAggregateInput
    journals?: JournalingOrderByRelationAggregateInput
    userMeditations?: userMeditationOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    user_id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    first_name?: StringFilter<"User"> | string
    last_name?: StringFilter<"User"> | string
    phone_number?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    created_at?: DateTimeFilter<"User"> | Date | string
    verifiedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    updated_at?: DateTimeFilter<"User"> | Date | string
    logins?: SystemLogListRelationFilter
    detections?: FaceDetectionListRelationFilter
    journals?: JournalingListRelationFilter
    userMeditations?: UserMeditationListRelationFilter
  }, "user_id" | "email">

  export type UserOrderByWithAggregationInput = {
    user_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    updated_at?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"User"> | number
    first_name?: StringWithAggregatesFilter<"User"> | string
    last_name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    phone_number?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    created_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
    verifiedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    updated_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type SystemLogWhereInput = {
    AND?: SystemLogWhereInput | SystemLogWhereInput[]
    OR?: SystemLogWhereInput[]
    NOT?: SystemLogWhereInput | SystemLogWhereInput[]
    id?: IntFilter<"SystemLog"> | number
    userId?: IntNullableFilter<"SystemLog"> | number | null
    ipAddress?: StringFilter<"SystemLog"> | string
    device?: StringFilter<"SystemLog"> | string
    action?: StringFilter<"SystemLog"> | string
    method?: StringFilter<"SystemLog"> | string
    description?: StringFilter<"SystemLog"> | string
    createdAt?: DateTimeFilter<"SystemLog"> | Date | string
    updatedAt?: DateTimeFilter<"SystemLog"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type SystemLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    ipAddress?: SortOrder
    device?: SortOrder
    action?: SortOrder
    method?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SystemLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SystemLogWhereInput | SystemLogWhereInput[]
    OR?: SystemLogWhereInput[]
    NOT?: SystemLogWhereInput | SystemLogWhereInput[]
    userId?: IntNullableFilter<"SystemLog"> | number | null
    ipAddress?: StringFilter<"SystemLog"> | string
    device?: StringFilter<"SystemLog"> | string
    action?: StringFilter<"SystemLog"> | string
    method?: StringFilter<"SystemLog"> | string
    description?: StringFilter<"SystemLog"> | string
    createdAt?: DateTimeFilter<"SystemLog"> | Date | string
    updatedAt?: DateTimeFilter<"SystemLog"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type SystemLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    ipAddress?: SortOrder
    device?: SortOrder
    action?: SortOrder
    method?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SystemLogCountOrderByAggregateInput
    _avg?: SystemLogAvgOrderByAggregateInput
    _max?: SystemLogMaxOrderByAggregateInput
    _min?: SystemLogMinOrderByAggregateInput
    _sum?: SystemLogSumOrderByAggregateInput
  }

  export type SystemLogScalarWhereWithAggregatesInput = {
    AND?: SystemLogScalarWhereWithAggregatesInput | SystemLogScalarWhereWithAggregatesInput[]
    OR?: SystemLogScalarWhereWithAggregatesInput[]
    NOT?: SystemLogScalarWhereWithAggregatesInput | SystemLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SystemLog"> | number
    userId?: IntNullableWithAggregatesFilter<"SystemLog"> | number | null
    ipAddress?: StringWithAggregatesFilter<"SystemLog"> | string
    device?: StringWithAggregatesFilter<"SystemLog"> | string
    action?: StringWithAggregatesFilter<"SystemLog"> | string
    method?: StringWithAggregatesFilter<"SystemLog"> | string
    description?: StringWithAggregatesFilter<"SystemLog"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SystemLog"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SystemLog"> | Date | string
  }

  export type FaceDetectionWhereInput = {
    AND?: FaceDetectionWhereInput | FaceDetectionWhereInput[]
    OR?: FaceDetectionWhereInput[]
    NOT?: FaceDetectionWhereInput | FaceDetectionWhereInput[]
    detection_id?: IntFilter<"FaceDetection"> | number
    userId?: IntNullableFilter<"FaceDetection"> | number | null
    imageUrl?: StringFilter<"FaceDetection"> | string
    mood?: EnumMoodFilter<"FaceDetection"> | $Enums.Mood
    detectedAt?: DateTimeFilter<"FaceDetection"> | Date | string
    createdAt?: DateTimeFilter<"FaceDetection"> | Date | string
    updatedAt?: DateTimeFilter<"FaceDetection"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type FaceDetectionOrderByWithRelationInput = {
    detection_id?: SortOrder
    userId?: SortOrderInput | SortOrder
    imageUrl?: SortOrder
    mood?: SortOrder
    detectedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type FaceDetectionWhereUniqueInput = Prisma.AtLeast<{
    detection_id?: number
    AND?: FaceDetectionWhereInput | FaceDetectionWhereInput[]
    OR?: FaceDetectionWhereInput[]
    NOT?: FaceDetectionWhereInput | FaceDetectionWhereInput[]
    userId?: IntNullableFilter<"FaceDetection"> | number | null
    imageUrl?: StringFilter<"FaceDetection"> | string
    mood?: EnumMoodFilter<"FaceDetection"> | $Enums.Mood
    detectedAt?: DateTimeFilter<"FaceDetection"> | Date | string
    createdAt?: DateTimeFilter<"FaceDetection"> | Date | string
    updatedAt?: DateTimeFilter<"FaceDetection"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "detection_id">

  export type FaceDetectionOrderByWithAggregationInput = {
    detection_id?: SortOrder
    userId?: SortOrderInput | SortOrder
    imageUrl?: SortOrder
    mood?: SortOrder
    detectedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FaceDetectionCountOrderByAggregateInput
    _avg?: FaceDetectionAvgOrderByAggregateInput
    _max?: FaceDetectionMaxOrderByAggregateInput
    _min?: FaceDetectionMinOrderByAggregateInput
    _sum?: FaceDetectionSumOrderByAggregateInput
  }

  export type FaceDetectionScalarWhereWithAggregatesInput = {
    AND?: FaceDetectionScalarWhereWithAggregatesInput | FaceDetectionScalarWhereWithAggregatesInput[]
    OR?: FaceDetectionScalarWhereWithAggregatesInput[]
    NOT?: FaceDetectionScalarWhereWithAggregatesInput | FaceDetectionScalarWhereWithAggregatesInput[]
    detection_id?: IntWithAggregatesFilter<"FaceDetection"> | number
    userId?: IntNullableWithAggregatesFilter<"FaceDetection"> | number | null
    imageUrl?: StringWithAggregatesFilter<"FaceDetection"> | string
    mood?: EnumMoodWithAggregatesFilter<"FaceDetection"> | $Enums.Mood
    detectedAt?: DateTimeWithAggregatesFilter<"FaceDetection"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"FaceDetection"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FaceDetection"> | Date | string
  }

  export type JournalingWhereInput = {
    AND?: JournalingWhereInput | JournalingWhereInput[]
    OR?: JournalingWhereInput[]
    NOT?: JournalingWhereInput | JournalingWhereInput[]
    journal_id?: IntFilter<"Journaling"> | number
    userId?: IntNullableFilter<"Journaling"> | number | null
    title?: StringFilter<"Journaling"> | string
    content?: StringFilter<"Journaling"> | string
    mood?: EnumMoodFilter<"Journaling"> | $Enums.Mood
    createdAt?: DateTimeFilter<"Journaling"> | Date | string
    updatedAt?: DateTimeFilter<"Journaling"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type JournalingOrderByWithRelationInput = {
    journal_id?: SortOrder
    userId?: SortOrderInput | SortOrder
    title?: SortOrder
    content?: SortOrder
    mood?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type JournalingWhereUniqueInput = Prisma.AtLeast<{
    journal_id?: number
    AND?: JournalingWhereInput | JournalingWhereInput[]
    OR?: JournalingWhereInput[]
    NOT?: JournalingWhereInput | JournalingWhereInput[]
    userId?: IntNullableFilter<"Journaling"> | number | null
    title?: StringFilter<"Journaling"> | string
    content?: StringFilter<"Journaling"> | string
    mood?: EnumMoodFilter<"Journaling"> | $Enums.Mood
    createdAt?: DateTimeFilter<"Journaling"> | Date | string
    updatedAt?: DateTimeFilter<"Journaling"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "journal_id">

  export type JournalingOrderByWithAggregationInput = {
    journal_id?: SortOrder
    userId?: SortOrderInput | SortOrder
    title?: SortOrder
    content?: SortOrder
    mood?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JournalingCountOrderByAggregateInput
    _avg?: JournalingAvgOrderByAggregateInput
    _max?: JournalingMaxOrderByAggregateInput
    _min?: JournalingMinOrderByAggregateInput
    _sum?: JournalingSumOrderByAggregateInput
  }

  export type JournalingScalarWhereWithAggregatesInput = {
    AND?: JournalingScalarWhereWithAggregatesInput | JournalingScalarWhereWithAggregatesInput[]
    OR?: JournalingScalarWhereWithAggregatesInput[]
    NOT?: JournalingScalarWhereWithAggregatesInput | JournalingScalarWhereWithAggregatesInput[]
    journal_id?: IntWithAggregatesFilter<"Journaling"> | number
    userId?: IntNullableWithAggregatesFilter<"Journaling"> | number | null
    title?: StringWithAggregatesFilter<"Journaling"> | string
    content?: StringWithAggregatesFilter<"Journaling"> | string
    mood?: EnumMoodWithAggregatesFilter<"Journaling"> | $Enums.Mood
    createdAt?: DateTimeWithAggregatesFilter<"Journaling"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Journaling"> | Date | string
  }

  export type meditationWhereInput = {
    AND?: meditationWhereInput | meditationWhereInput[]
    OR?: meditationWhereInput[]
    NOT?: meditationWhereInput | meditationWhereInput[]
    meditation_id?: IntFilter<"meditation"> | number
    title?: StringFilter<"meditation"> | string
    description?: StringFilter<"meditation"> | string
    mediaUrl?: StringFilter<"meditation"> | string
    duration?: IntFilter<"meditation"> | number
    createdAt?: DateTimeFilter<"meditation"> | Date | string
    updatedAt?: DateTimeFilter<"meditation"> | Date | string
    userMeditations?: UserMeditationListRelationFilter
  }

  export type meditationOrderByWithRelationInput = {
    meditation_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    mediaUrl?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userMeditations?: userMeditationOrderByRelationAggregateInput
  }

  export type meditationWhereUniqueInput = Prisma.AtLeast<{
    meditation_id?: number
    AND?: meditationWhereInput | meditationWhereInput[]
    OR?: meditationWhereInput[]
    NOT?: meditationWhereInput | meditationWhereInput[]
    title?: StringFilter<"meditation"> | string
    description?: StringFilter<"meditation"> | string
    mediaUrl?: StringFilter<"meditation"> | string
    duration?: IntFilter<"meditation"> | number
    createdAt?: DateTimeFilter<"meditation"> | Date | string
    updatedAt?: DateTimeFilter<"meditation"> | Date | string
    userMeditations?: UserMeditationListRelationFilter
  }, "meditation_id">

  export type meditationOrderByWithAggregationInput = {
    meditation_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    mediaUrl?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: meditationCountOrderByAggregateInput
    _avg?: meditationAvgOrderByAggregateInput
    _max?: meditationMaxOrderByAggregateInput
    _min?: meditationMinOrderByAggregateInput
    _sum?: meditationSumOrderByAggregateInput
  }

  export type meditationScalarWhereWithAggregatesInput = {
    AND?: meditationScalarWhereWithAggregatesInput | meditationScalarWhereWithAggregatesInput[]
    OR?: meditationScalarWhereWithAggregatesInput[]
    NOT?: meditationScalarWhereWithAggregatesInput | meditationScalarWhereWithAggregatesInput[]
    meditation_id?: IntWithAggregatesFilter<"meditation"> | number
    title?: StringWithAggregatesFilter<"meditation"> | string
    description?: StringWithAggregatesFilter<"meditation"> | string
    mediaUrl?: StringWithAggregatesFilter<"meditation"> | string
    duration?: IntWithAggregatesFilter<"meditation"> | number
    createdAt?: DateTimeWithAggregatesFilter<"meditation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"meditation"> | Date | string
  }

  export type userMeditationWhereInput = {
    AND?: userMeditationWhereInput | userMeditationWhereInput[]
    OR?: userMeditationWhereInput[]
    NOT?: userMeditationWhereInput | userMeditationWhereInput[]
    id?: IntFilter<"userMeditation"> | number
    userId?: IntNullableFilter<"userMeditation"> | number | null
    meditationId?: IntNullableFilter<"userMeditation"> | number | null
    createdAt?: DateTimeFilter<"userMeditation"> | Date | string
    updatedAt?: DateTimeFilter<"userMeditation"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    meditation?: XOR<MeditationNullableScalarRelationFilter, meditationWhereInput> | null
  }

  export type userMeditationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    meditationId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    meditation?: meditationOrderByWithRelationInput
  }

  export type userMeditationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: userMeditationWhereInput | userMeditationWhereInput[]
    OR?: userMeditationWhereInput[]
    NOT?: userMeditationWhereInput | userMeditationWhereInput[]
    userId?: IntNullableFilter<"userMeditation"> | number | null
    meditationId?: IntNullableFilter<"userMeditation"> | number | null
    createdAt?: DateTimeFilter<"userMeditation"> | Date | string
    updatedAt?: DateTimeFilter<"userMeditation"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    meditation?: XOR<MeditationNullableScalarRelationFilter, meditationWhereInput> | null
  }, "id">

  export type userMeditationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    meditationId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: userMeditationCountOrderByAggregateInput
    _avg?: userMeditationAvgOrderByAggregateInput
    _max?: userMeditationMaxOrderByAggregateInput
    _min?: userMeditationMinOrderByAggregateInput
    _sum?: userMeditationSumOrderByAggregateInput
  }

  export type userMeditationScalarWhereWithAggregatesInput = {
    AND?: userMeditationScalarWhereWithAggregatesInput | userMeditationScalarWhereWithAggregatesInput[]
    OR?: userMeditationScalarWhereWithAggregatesInput[]
    NOT?: userMeditationScalarWhereWithAggregatesInput | userMeditationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"userMeditation"> | number
    userId?: IntNullableWithAggregatesFilter<"userMeditation"> | number | null
    meditationId?: IntNullableWithAggregatesFilter<"userMeditation"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"userMeditation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"userMeditation"> | Date | string
  }

  export type UserCreateInput = {
    first_name: string
    last_name: string
    email: string
    phone_number: string
    password: string
    created_at?: Date | string
    verifiedAt?: Date | string | null
    updated_at?: Date | string
    logins?: SystemLogCreateNestedManyWithoutUserInput
    detections?: FaceDetectionCreateNestedManyWithoutUserInput
    journals?: JournalingCreateNestedManyWithoutUserInput
    userMeditations?: userMeditationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    user_id?: number
    first_name: string
    last_name: string
    email: string
    phone_number: string
    password: string
    created_at?: Date | string
    verifiedAt?: Date | string | null
    updated_at?: Date | string
    logins?: SystemLogUncheckedCreateNestedManyWithoutUserInput
    detections?: FaceDetectionUncheckedCreateNestedManyWithoutUserInput
    journals?: JournalingUncheckedCreateNestedManyWithoutUserInput
    userMeditations?: userMeditationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    logins?: SystemLogUpdateManyWithoutUserNestedInput
    detections?: FaceDetectionUpdateManyWithoutUserNestedInput
    journals?: JournalingUpdateManyWithoutUserNestedInput
    userMeditations?: userMeditationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    logins?: SystemLogUncheckedUpdateManyWithoutUserNestedInput
    detections?: FaceDetectionUncheckedUpdateManyWithoutUserNestedInput
    journals?: JournalingUncheckedUpdateManyWithoutUserNestedInput
    userMeditations?: userMeditationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    user_id?: number
    first_name: string
    last_name: string
    email: string
    phone_number: string
    password: string
    created_at?: Date | string
    verifiedAt?: Date | string | null
    updated_at?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemLogCreateInput = {
    ipAddress: string
    device: string
    action: string
    method: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutLoginsInput
  }

  export type SystemLogUncheckedCreateInput = {
    id?: number
    userId?: number | null
    ipAddress: string
    device: string
    action: string
    method: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemLogUpdateInput = {
    ipAddress?: StringFieldUpdateOperationsInput | string
    device?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutLoginsNestedInput
  }

  export type SystemLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    device?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemLogCreateManyInput = {
    id?: number
    userId?: number | null
    ipAddress: string
    device: string
    action: string
    method: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemLogUpdateManyMutationInput = {
    ipAddress?: StringFieldUpdateOperationsInput | string
    device?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    ipAddress?: StringFieldUpdateOperationsInput | string
    device?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FaceDetectionCreateInput = {
    imageUrl: string
    mood?: $Enums.Mood
    detectedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutDetectionsInput
  }

  export type FaceDetectionUncheckedCreateInput = {
    detection_id?: number
    userId?: number | null
    imageUrl: string
    mood?: $Enums.Mood
    detectedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FaceDetectionUpdateInput = {
    imageUrl?: StringFieldUpdateOperationsInput | string
    mood?: EnumMoodFieldUpdateOperationsInput | $Enums.Mood
    detectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutDetectionsNestedInput
  }

  export type FaceDetectionUncheckedUpdateInput = {
    detection_id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    imageUrl?: StringFieldUpdateOperationsInput | string
    mood?: EnumMoodFieldUpdateOperationsInput | $Enums.Mood
    detectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FaceDetectionCreateManyInput = {
    detection_id?: number
    userId?: number | null
    imageUrl: string
    mood?: $Enums.Mood
    detectedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FaceDetectionUpdateManyMutationInput = {
    imageUrl?: StringFieldUpdateOperationsInput | string
    mood?: EnumMoodFieldUpdateOperationsInput | $Enums.Mood
    detectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FaceDetectionUncheckedUpdateManyInput = {
    detection_id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    imageUrl?: StringFieldUpdateOperationsInput | string
    mood?: EnumMoodFieldUpdateOperationsInput | $Enums.Mood
    detectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JournalingCreateInput = {
    title: string
    content: string
    mood?: $Enums.Mood
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutJournalsInput
  }

  export type JournalingUncheckedCreateInput = {
    journal_id?: number
    userId?: number | null
    title: string
    content: string
    mood?: $Enums.Mood
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JournalingUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mood?: EnumMoodFieldUpdateOperationsInput | $Enums.Mood
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutJournalsNestedInput
  }

  export type JournalingUncheckedUpdateInput = {
    journal_id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mood?: EnumMoodFieldUpdateOperationsInput | $Enums.Mood
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JournalingCreateManyInput = {
    journal_id?: number
    userId?: number | null
    title: string
    content: string
    mood?: $Enums.Mood
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JournalingUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mood?: EnumMoodFieldUpdateOperationsInput | $Enums.Mood
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JournalingUncheckedUpdateManyInput = {
    journal_id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mood?: EnumMoodFieldUpdateOperationsInput | $Enums.Mood
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type meditationCreateInput = {
    title: string
    description: string
    mediaUrl: string
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userMeditations?: userMeditationCreateNestedManyWithoutMeditationInput
  }

  export type meditationUncheckedCreateInput = {
    meditation_id?: number
    title: string
    description: string
    mediaUrl: string
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userMeditations?: userMeditationUncheckedCreateNestedManyWithoutMeditationInput
  }

  export type meditationUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    mediaUrl?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userMeditations?: userMeditationUpdateManyWithoutMeditationNestedInput
  }

  export type meditationUncheckedUpdateInput = {
    meditation_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    mediaUrl?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userMeditations?: userMeditationUncheckedUpdateManyWithoutMeditationNestedInput
  }

  export type meditationCreateManyInput = {
    meditation_id?: number
    title: string
    description: string
    mediaUrl: string
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type meditationUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    mediaUrl?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type meditationUncheckedUpdateManyInput = {
    meditation_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    mediaUrl?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userMeditationCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutUserMeditationsInput
    meditation?: meditationCreateNestedOneWithoutUserMeditationsInput
  }

  export type userMeditationUncheckedCreateInput = {
    id?: number
    userId?: number | null
    meditationId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type userMeditationUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutUserMeditationsNestedInput
    meditation?: meditationUpdateOneWithoutUserMeditationsNestedInput
  }

  export type userMeditationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    meditationId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userMeditationCreateManyInput = {
    id?: number
    userId?: number | null
    meditationId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type userMeditationUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userMeditationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    meditationId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SystemLogListRelationFilter = {
    every?: SystemLogWhereInput
    some?: SystemLogWhereInput
    none?: SystemLogWhereInput
  }

  export type FaceDetectionListRelationFilter = {
    every?: FaceDetectionWhereInput
    some?: FaceDetectionWhereInput
    none?: FaceDetectionWhereInput
  }

  export type JournalingListRelationFilter = {
    every?: JournalingWhereInput
    some?: JournalingWhereInput
    none?: JournalingWhereInput
  }

  export type UserMeditationListRelationFilter = {
    every?: userMeditationWhereInput
    some?: userMeditationWhereInput
    none?: userMeditationWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SystemLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FaceDetectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JournalingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userMeditationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    user_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    verifiedAt?: SortOrder
    updated_at?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    user_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    verifiedAt?: SortOrder
    updated_at?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    user_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    verifiedAt?: SortOrder
    updated_at?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type SystemLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ipAddress?: SortOrder
    device?: SortOrder
    action?: SortOrder
    method?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemLogAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SystemLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ipAddress?: SortOrder
    device?: SortOrder
    action?: SortOrder
    method?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    ipAddress?: SortOrder
    device?: SortOrder
    action?: SortOrder
    method?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemLogSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumMoodFilter<$PrismaModel = never> = {
    equals?: $Enums.Mood | EnumMoodFieldRefInput<$PrismaModel>
    in?: $Enums.Mood[] | ListEnumMoodFieldRefInput<$PrismaModel>
    notIn?: $Enums.Mood[] | ListEnumMoodFieldRefInput<$PrismaModel>
    not?: NestedEnumMoodFilter<$PrismaModel> | $Enums.Mood
  }

  export type FaceDetectionCountOrderByAggregateInput = {
    detection_id?: SortOrder
    userId?: SortOrder
    imageUrl?: SortOrder
    mood?: SortOrder
    detectedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FaceDetectionAvgOrderByAggregateInput = {
    detection_id?: SortOrder
    userId?: SortOrder
  }

  export type FaceDetectionMaxOrderByAggregateInput = {
    detection_id?: SortOrder
    userId?: SortOrder
    imageUrl?: SortOrder
    mood?: SortOrder
    detectedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FaceDetectionMinOrderByAggregateInput = {
    detection_id?: SortOrder
    userId?: SortOrder
    imageUrl?: SortOrder
    mood?: SortOrder
    detectedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FaceDetectionSumOrderByAggregateInput = {
    detection_id?: SortOrder
    userId?: SortOrder
  }

  export type EnumMoodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Mood | EnumMoodFieldRefInput<$PrismaModel>
    in?: $Enums.Mood[] | ListEnumMoodFieldRefInput<$PrismaModel>
    notIn?: $Enums.Mood[] | ListEnumMoodFieldRefInput<$PrismaModel>
    not?: NestedEnumMoodWithAggregatesFilter<$PrismaModel> | $Enums.Mood
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMoodFilter<$PrismaModel>
    _max?: NestedEnumMoodFilter<$PrismaModel>
  }

  export type JournalingCountOrderByAggregateInput = {
    journal_id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    mood?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JournalingAvgOrderByAggregateInput = {
    journal_id?: SortOrder
    userId?: SortOrder
  }

  export type JournalingMaxOrderByAggregateInput = {
    journal_id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    mood?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JournalingMinOrderByAggregateInput = {
    journal_id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    mood?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JournalingSumOrderByAggregateInput = {
    journal_id?: SortOrder
    userId?: SortOrder
  }

  export type meditationCountOrderByAggregateInput = {
    meditation_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    mediaUrl?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type meditationAvgOrderByAggregateInput = {
    meditation_id?: SortOrder
    duration?: SortOrder
  }

  export type meditationMaxOrderByAggregateInput = {
    meditation_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    mediaUrl?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type meditationMinOrderByAggregateInput = {
    meditation_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    mediaUrl?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type meditationSumOrderByAggregateInput = {
    meditation_id?: SortOrder
    duration?: SortOrder
  }

  export type MeditationNullableScalarRelationFilter = {
    is?: meditationWhereInput | null
    isNot?: meditationWhereInput | null
  }

  export type userMeditationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    meditationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type userMeditationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    meditationId?: SortOrder
  }

  export type userMeditationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    meditationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type userMeditationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    meditationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type userMeditationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    meditationId?: SortOrder
  }

  export type SystemLogCreateNestedManyWithoutUserInput = {
    create?: XOR<SystemLogCreateWithoutUserInput, SystemLogUncheckedCreateWithoutUserInput> | SystemLogCreateWithoutUserInput[] | SystemLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SystemLogCreateOrConnectWithoutUserInput | SystemLogCreateOrConnectWithoutUserInput[]
    createMany?: SystemLogCreateManyUserInputEnvelope
    connect?: SystemLogWhereUniqueInput | SystemLogWhereUniqueInput[]
  }

  export type FaceDetectionCreateNestedManyWithoutUserInput = {
    create?: XOR<FaceDetectionCreateWithoutUserInput, FaceDetectionUncheckedCreateWithoutUserInput> | FaceDetectionCreateWithoutUserInput[] | FaceDetectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FaceDetectionCreateOrConnectWithoutUserInput | FaceDetectionCreateOrConnectWithoutUserInput[]
    createMany?: FaceDetectionCreateManyUserInputEnvelope
    connect?: FaceDetectionWhereUniqueInput | FaceDetectionWhereUniqueInput[]
  }

  export type JournalingCreateNestedManyWithoutUserInput = {
    create?: XOR<JournalingCreateWithoutUserInput, JournalingUncheckedCreateWithoutUserInput> | JournalingCreateWithoutUserInput[] | JournalingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JournalingCreateOrConnectWithoutUserInput | JournalingCreateOrConnectWithoutUserInput[]
    createMany?: JournalingCreateManyUserInputEnvelope
    connect?: JournalingWhereUniqueInput | JournalingWhereUniqueInput[]
  }

  export type userMeditationCreateNestedManyWithoutUserInput = {
    create?: XOR<userMeditationCreateWithoutUserInput, userMeditationUncheckedCreateWithoutUserInput> | userMeditationCreateWithoutUserInput[] | userMeditationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: userMeditationCreateOrConnectWithoutUserInput | userMeditationCreateOrConnectWithoutUserInput[]
    createMany?: userMeditationCreateManyUserInputEnvelope
    connect?: userMeditationWhereUniqueInput | userMeditationWhereUniqueInput[]
  }

  export type SystemLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SystemLogCreateWithoutUserInput, SystemLogUncheckedCreateWithoutUserInput> | SystemLogCreateWithoutUserInput[] | SystemLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SystemLogCreateOrConnectWithoutUserInput | SystemLogCreateOrConnectWithoutUserInput[]
    createMany?: SystemLogCreateManyUserInputEnvelope
    connect?: SystemLogWhereUniqueInput | SystemLogWhereUniqueInput[]
  }

  export type FaceDetectionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FaceDetectionCreateWithoutUserInput, FaceDetectionUncheckedCreateWithoutUserInput> | FaceDetectionCreateWithoutUserInput[] | FaceDetectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FaceDetectionCreateOrConnectWithoutUserInput | FaceDetectionCreateOrConnectWithoutUserInput[]
    createMany?: FaceDetectionCreateManyUserInputEnvelope
    connect?: FaceDetectionWhereUniqueInput | FaceDetectionWhereUniqueInput[]
  }

  export type JournalingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<JournalingCreateWithoutUserInput, JournalingUncheckedCreateWithoutUserInput> | JournalingCreateWithoutUserInput[] | JournalingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JournalingCreateOrConnectWithoutUserInput | JournalingCreateOrConnectWithoutUserInput[]
    createMany?: JournalingCreateManyUserInputEnvelope
    connect?: JournalingWhereUniqueInput | JournalingWhereUniqueInput[]
  }

  export type userMeditationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<userMeditationCreateWithoutUserInput, userMeditationUncheckedCreateWithoutUserInput> | userMeditationCreateWithoutUserInput[] | userMeditationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: userMeditationCreateOrConnectWithoutUserInput | userMeditationCreateOrConnectWithoutUserInput[]
    createMany?: userMeditationCreateManyUserInputEnvelope
    connect?: userMeditationWhereUniqueInput | userMeditationWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type SystemLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<SystemLogCreateWithoutUserInput, SystemLogUncheckedCreateWithoutUserInput> | SystemLogCreateWithoutUserInput[] | SystemLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SystemLogCreateOrConnectWithoutUserInput | SystemLogCreateOrConnectWithoutUserInput[]
    upsert?: SystemLogUpsertWithWhereUniqueWithoutUserInput | SystemLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SystemLogCreateManyUserInputEnvelope
    set?: SystemLogWhereUniqueInput | SystemLogWhereUniqueInput[]
    disconnect?: SystemLogWhereUniqueInput | SystemLogWhereUniqueInput[]
    delete?: SystemLogWhereUniqueInput | SystemLogWhereUniqueInput[]
    connect?: SystemLogWhereUniqueInput | SystemLogWhereUniqueInput[]
    update?: SystemLogUpdateWithWhereUniqueWithoutUserInput | SystemLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SystemLogUpdateManyWithWhereWithoutUserInput | SystemLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SystemLogScalarWhereInput | SystemLogScalarWhereInput[]
  }

  export type FaceDetectionUpdateManyWithoutUserNestedInput = {
    create?: XOR<FaceDetectionCreateWithoutUserInput, FaceDetectionUncheckedCreateWithoutUserInput> | FaceDetectionCreateWithoutUserInput[] | FaceDetectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FaceDetectionCreateOrConnectWithoutUserInput | FaceDetectionCreateOrConnectWithoutUserInput[]
    upsert?: FaceDetectionUpsertWithWhereUniqueWithoutUserInput | FaceDetectionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FaceDetectionCreateManyUserInputEnvelope
    set?: FaceDetectionWhereUniqueInput | FaceDetectionWhereUniqueInput[]
    disconnect?: FaceDetectionWhereUniqueInput | FaceDetectionWhereUniqueInput[]
    delete?: FaceDetectionWhereUniqueInput | FaceDetectionWhereUniqueInput[]
    connect?: FaceDetectionWhereUniqueInput | FaceDetectionWhereUniqueInput[]
    update?: FaceDetectionUpdateWithWhereUniqueWithoutUserInput | FaceDetectionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FaceDetectionUpdateManyWithWhereWithoutUserInput | FaceDetectionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FaceDetectionScalarWhereInput | FaceDetectionScalarWhereInput[]
  }

  export type JournalingUpdateManyWithoutUserNestedInput = {
    create?: XOR<JournalingCreateWithoutUserInput, JournalingUncheckedCreateWithoutUserInput> | JournalingCreateWithoutUserInput[] | JournalingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JournalingCreateOrConnectWithoutUserInput | JournalingCreateOrConnectWithoutUserInput[]
    upsert?: JournalingUpsertWithWhereUniqueWithoutUserInput | JournalingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: JournalingCreateManyUserInputEnvelope
    set?: JournalingWhereUniqueInput | JournalingWhereUniqueInput[]
    disconnect?: JournalingWhereUniqueInput | JournalingWhereUniqueInput[]
    delete?: JournalingWhereUniqueInput | JournalingWhereUniqueInput[]
    connect?: JournalingWhereUniqueInput | JournalingWhereUniqueInput[]
    update?: JournalingUpdateWithWhereUniqueWithoutUserInput | JournalingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: JournalingUpdateManyWithWhereWithoutUserInput | JournalingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: JournalingScalarWhereInput | JournalingScalarWhereInput[]
  }

  export type userMeditationUpdateManyWithoutUserNestedInput = {
    create?: XOR<userMeditationCreateWithoutUserInput, userMeditationUncheckedCreateWithoutUserInput> | userMeditationCreateWithoutUserInput[] | userMeditationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: userMeditationCreateOrConnectWithoutUserInput | userMeditationCreateOrConnectWithoutUserInput[]
    upsert?: userMeditationUpsertWithWhereUniqueWithoutUserInput | userMeditationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: userMeditationCreateManyUserInputEnvelope
    set?: userMeditationWhereUniqueInput | userMeditationWhereUniqueInput[]
    disconnect?: userMeditationWhereUniqueInput | userMeditationWhereUniqueInput[]
    delete?: userMeditationWhereUniqueInput | userMeditationWhereUniqueInput[]
    connect?: userMeditationWhereUniqueInput | userMeditationWhereUniqueInput[]
    update?: userMeditationUpdateWithWhereUniqueWithoutUserInput | userMeditationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: userMeditationUpdateManyWithWhereWithoutUserInput | userMeditationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: userMeditationScalarWhereInput | userMeditationScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SystemLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SystemLogCreateWithoutUserInput, SystemLogUncheckedCreateWithoutUserInput> | SystemLogCreateWithoutUserInput[] | SystemLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SystemLogCreateOrConnectWithoutUserInput | SystemLogCreateOrConnectWithoutUserInput[]
    upsert?: SystemLogUpsertWithWhereUniqueWithoutUserInput | SystemLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SystemLogCreateManyUserInputEnvelope
    set?: SystemLogWhereUniqueInput | SystemLogWhereUniqueInput[]
    disconnect?: SystemLogWhereUniqueInput | SystemLogWhereUniqueInput[]
    delete?: SystemLogWhereUniqueInput | SystemLogWhereUniqueInput[]
    connect?: SystemLogWhereUniqueInput | SystemLogWhereUniqueInput[]
    update?: SystemLogUpdateWithWhereUniqueWithoutUserInput | SystemLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SystemLogUpdateManyWithWhereWithoutUserInput | SystemLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SystemLogScalarWhereInput | SystemLogScalarWhereInput[]
  }

  export type FaceDetectionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FaceDetectionCreateWithoutUserInput, FaceDetectionUncheckedCreateWithoutUserInput> | FaceDetectionCreateWithoutUserInput[] | FaceDetectionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FaceDetectionCreateOrConnectWithoutUserInput | FaceDetectionCreateOrConnectWithoutUserInput[]
    upsert?: FaceDetectionUpsertWithWhereUniqueWithoutUserInput | FaceDetectionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FaceDetectionCreateManyUserInputEnvelope
    set?: FaceDetectionWhereUniqueInput | FaceDetectionWhereUniqueInput[]
    disconnect?: FaceDetectionWhereUniqueInput | FaceDetectionWhereUniqueInput[]
    delete?: FaceDetectionWhereUniqueInput | FaceDetectionWhereUniqueInput[]
    connect?: FaceDetectionWhereUniqueInput | FaceDetectionWhereUniqueInput[]
    update?: FaceDetectionUpdateWithWhereUniqueWithoutUserInput | FaceDetectionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FaceDetectionUpdateManyWithWhereWithoutUserInput | FaceDetectionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FaceDetectionScalarWhereInput | FaceDetectionScalarWhereInput[]
  }

  export type JournalingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<JournalingCreateWithoutUserInput, JournalingUncheckedCreateWithoutUserInput> | JournalingCreateWithoutUserInput[] | JournalingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JournalingCreateOrConnectWithoutUserInput | JournalingCreateOrConnectWithoutUserInput[]
    upsert?: JournalingUpsertWithWhereUniqueWithoutUserInput | JournalingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: JournalingCreateManyUserInputEnvelope
    set?: JournalingWhereUniqueInput | JournalingWhereUniqueInput[]
    disconnect?: JournalingWhereUniqueInput | JournalingWhereUniqueInput[]
    delete?: JournalingWhereUniqueInput | JournalingWhereUniqueInput[]
    connect?: JournalingWhereUniqueInput | JournalingWhereUniqueInput[]
    update?: JournalingUpdateWithWhereUniqueWithoutUserInput | JournalingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: JournalingUpdateManyWithWhereWithoutUserInput | JournalingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: JournalingScalarWhereInput | JournalingScalarWhereInput[]
  }

  export type userMeditationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<userMeditationCreateWithoutUserInput, userMeditationUncheckedCreateWithoutUserInput> | userMeditationCreateWithoutUserInput[] | userMeditationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: userMeditationCreateOrConnectWithoutUserInput | userMeditationCreateOrConnectWithoutUserInput[]
    upsert?: userMeditationUpsertWithWhereUniqueWithoutUserInput | userMeditationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: userMeditationCreateManyUserInputEnvelope
    set?: userMeditationWhereUniqueInput | userMeditationWhereUniqueInput[]
    disconnect?: userMeditationWhereUniqueInput | userMeditationWhereUniqueInput[]
    delete?: userMeditationWhereUniqueInput | userMeditationWhereUniqueInput[]
    connect?: userMeditationWhereUniqueInput | userMeditationWhereUniqueInput[]
    update?: userMeditationUpdateWithWhereUniqueWithoutUserInput | userMeditationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: userMeditationUpdateManyWithWhereWithoutUserInput | userMeditationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: userMeditationScalarWhereInput | userMeditationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutLoginsInput = {
    create?: XOR<UserCreateWithoutLoginsInput, UserUncheckedCreateWithoutLoginsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLoginsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutLoginsNestedInput = {
    create?: XOR<UserCreateWithoutLoginsInput, UserUncheckedCreateWithoutLoginsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLoginsInput
    upsert?: UserUpsertWithoutLoginsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLoginsInput, UserUpdateWithoutLoginsInput>, UserUncheckedUpdateWithoutLoginsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutDetectionsInput = {
    create?: XOR<UserCreateWithoutDetectionsInput, UserUncheckedCreateWithoutDetectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDetectionsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumMoodFieldUpdateOperationsInput = {
    set?: $Enums.Mood
  }

  export type UserUpdateOneWithoutDetectionsNestedInput = {
    create?: XOR<UserCreateWithoutDetectionsInput, UserUncheckedCreateWithoutDetectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDetectionsInput
    upsert?: UserUpsertWithoutDetectionsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDetectionsInput, UserUpdateWithoutDetectionsInput>, UserUncheckedUpdateWithoutDetectionsInput>
  }

  export type UserCreateNestedOneWithoutJournalsInput = {
    create?: XOR<UserCreateWithoutJournalsInput, UserUncheckedCreateWithoutJournalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutJournalsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutJournalsNestedInput = {
    create?: XOR<UserCreateWithoutJournalsInput, UserUncheckedCreateWithoutJournalsInput>
    connectOrCreate?: UserCreateOrConnectWithoutJournalsInput
    upsert?: UserUpsertWithoutJournalsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutJournalsInput, UserUpdateWithoutJournalsInput>, UserUncheckedUpdateWithoutJournalsInput>
  }

  export type userMeditationCreateNestedManyWithoutMeditationInput = {
    create?: XOR<userMeditationCreateWithoutMeditationInput, userMeditationUncheckedCreateWithoutMeditationInput> | userMeditationCreateWithoutMeditationInput[] | userMeditationUncheckedCreateWithoutMeditationInput[]
    connectOrCreate?: userMeditationCreateOrConnectWithoutMeditationInput | userMeditationCreateOrConnectWithoutMeditationInput[]
    createMany?: userMeditationCreateManyMeditationInputEnvelope
    connect?: userMeditationWhereUniqueInput | userMeditationWhereUniqueInput[]
  }

  export type userMeditationUncheckedCreateNestedManyWithoutMeditationInput = {
    create?: XOR<userMeditationCreateWithoutMeditationInput, userMeditationUncheckedCreateWithoutMeditationInput> | userMeditationCreateWithoutMeditationInput[] | userMeditationUncheckedCreateWithoutMeditationInput[]
    connectOrCreate?: userMeditationCreateOrConnectWithoutMeditationInput | userMeditationCreateOrConnectWithoutMeditationInput[]
    createMany?: userMeditationCreateManyMeditationInputEnvelope
    connect?: userMeditationWhereUniqueInput | userMeditationWhereUniqueInput[]
  }

  export type userMeditationUpdateManyWithoutMeditationNestedInput = {
    create?: XOR<userMeditationCreateWithoutMeditationInput, userMeditationUncheckedCreateWithoutMeditationInput> | userMeditationCreateWithoutMeditationInput[] | userMeditationUncheckedCreateWithoutMeditationInput[]
    connectOrCreate?: userMeditationCreateOrConnectWithoutMeditationInput | userMeditationCreateOrConnectWithoutMeditationInput[]
    upsert?: userMeditationUpsertWithWhereUniqueWithoutMeditationInput | userMeditationUpsertWithWhereUniqueWithoutMeditationInput[]
    createMany?: userMeditationCreateManyMeditationInputEnvelope
    set?: userMeditationWhereUniqueInput | userMeditationWhereUniqueInput[]
    disconnect?: userMeditationWhereUniqueInput | userMeditationWhereUniqueInput[]
    delete?: userMeditationWhereUniqueInput | userMeditationWhereUniqueInput[]
    connect?: userMeditationWhereUniqueInput | userMeditationWhereUniqueInput[]
    update?: userMeditationUpdateWithWhereUniqueWithoutMeditationInput | userMeditationUpdateWithWhereUniqueWithoutMeditationInput[]
    updateMany?: userMeditationUpdateManyWithWhereWithoutMeditationInput | userMeditationUpdateManyWithWhereWithoutMeditationInput[]
    deleteMany?: userMeditationScalarWhereInput | userMeditationScalarWhereInput[]
  }

  export type userMeditationUncheckedUpdateManyWithoutMeditationNestedInput = {
    create?: XOR<userMeditationCreateWithoutMeditationInput, userMeditationUncheckedCreateWithoutMeditationInput> | userMeditationCreateWithoutMeditationInput[] | userMeditationUncheckedCreateWithoutMeditationInput[]
    connectOrCreate?: userMeditationCreateOrConnectWithoutMeditationInput | userMeditationCreateOrConnectWithoutMeditationInput[]
    upsert?: userMeditationUpsertWithWhereUniqueWithoutMeditationInput | userMeditationUpsertWithWhereUniqueWithoutMeditationInput[]
    createMany?: userMeditationCreateManyMeditationInputEnvelope
    set?: userMeditationWhereUniqueInput | userMeditationWhereUniqueInput[]
    disconnect?: userMeditationWhereUniqueInput | userMeditationWhereUniqueInput[]
    delete?: userMeditationWhereUniqueInput | userMeditationWhereUniqueInput[]
    connect?: userMeditationWhereUniqueInput | userMeditationWhereUniqueInput[]
    update?: userMeditationUpdateWithWhereUniqueWithoutMeditationInput | userMeditationUpdateWithWhereUniqueWithoutMeditationInput[]
    updateMany?: userMeditationUpdateManyWithWhereWithoutMeditationInput | userMeditationUpdateManyWithWhereWithoutMeditationInput[]
    deleteMany?: userMeditationScalarWhereInput | userMeditationScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserMeditationsInput = {
    create?: XOR<UserCreateWithoutUserMeditationsInput, UserUncheckedCreateWithoutUserMeditationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserMeditationsInput
    connect?: UserWhereUniqueInput
  }

  export type meditationCreateNestedOneWithoutUserMeditationsInput = {
    create?: XOR<meditationCreateWithoutUserMeditationsInput, meditationUncheckedCreateWithoutUserMeditationsInput>
    connectOrCreate?: meditationCreateOrConnectWithoutUserMeditationsInput
    connect?: meditationWhereUniqueInput
  }

  export type UserUpdateOneWithoutUserMeditationsNestedInput = {
    create?: XOR<UserCreateWithoutUserMeditationsInput, UserUncheckedCreateWithoutUserMeditationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserMeditationsInput
    upsert?: UserUpsertWithoutUserMeditationsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserMeditationsInput, UserUpdateWithoutUserMeditationsInput>, UserUncheckedUpdateWithoutUserMeditationsInput>
  }

  export type meditationUpdateOneWithoutUserMeditationsNestedInput = {
    create?: XOR<meditationCreateWithoutUserMeditationsInput, meditationUncheckedCreateWithoutUserMeditationsInput>
    connectOrCreate?: meditationCreateOrConnectWithoutUserMeditationsInput
    upsert?: meditationUpsertWithoutUserMeditationsInput
    disconnect?: meditationWhereInput | boolean
    delete?: meditationWhereInput | boolean
    connect?: meditationWhereUniqueInput
    update?: XOR<XOR<meditationUpdateToOneWithWhereWithoutUserMeditationsInput, meditationUpdateWithoutUserMeditationsInput>, meditationUncheckedUpdateWithoutUserMeditationsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumMoodFilter<$PrismaModel = never> = {
    equals?: $Enums.Mood | EnumMoodFieldRefInput<$PrismaModel>
    in?: $Enums.Mood[] | ListEnumMoodFieldRefInput<$PrismaModel>
    notIn?: $Enums.Mood[] | ListEnumMoodFieldRefInput<$PrismaModel>
    not?: NestedEnumMoodFilter<$PrismaModel> | $Enums.Mood
  }

  export type NestedEnumMoodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Mood | EnumMoodFieldRefInput<$PrismaModel>
    in?: $Enums.Mood[] | ListEnumMoodFieldRefInput<$PrismaModel>
    notIn?: $Enums.Mood[] | ListEnumMoodFieldRefInput<$PrismaModel>
    not?: NestedEnumMoodWithAggregatesFilter<$PrismaModel> | $Enums.Mood
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMoodFilter<$PrismaModel>
    _max?: NestedEnumMoodFilter<$PrismaModel>
  }

  export type SystemLogCreateWithoutUserInput = {
    ipAddress: string
    device: string
    action: string
    method: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemLogUncheckedCreateWithoutUserInput = {
    id?: number
    ipAddress: string
    device: string
    action: string
    method: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemLogCreateOrConnectWithoutUserInput = {
    where: SystemLogWhereUniqueInput
    create: XOR<SystemLogCreateWithoutUserInput, SystemLogUncheckedCreateWithoutUserInput>
  }

  export type SystemLogCreateManyUserInputEnvelope = {
    data: SystemLogCreateManyUserInput | SystemLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FaceDetectionCreateWithoutUserInput = {
    imageUrl: string
    mood?: $Enums.Mood
    detectedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FaceDetectionUncheckedCreateWithoutUserInput = {
    detection_id?: number
    imageUrl: string
    mood?: $Enums.Mood
    detectedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FaceDetectionCreateOrConnectWithoutUserInput = {
    where: FaceDetectionWhereUniqueInput
    create: XOR<FaceDetectionCreateWithoutUserInput, FaceDetectionUncheckedCreateWithoutUserInput>
  }

  export type FaceDetectionCreateManyUserInputEnvelope = {
    data: FaceDetectionCreateManyUserInput | FaceDetectionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type JournalingCreateWithoutUserInput = {
    title: string
    content: string
    mood?: $Enums.Mood
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JournalingUncheckedCreateWithoutUserInput = {
    journal_id?: number
    title: string
    content: string
    mood?: $Enums.Mood
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JournalingCreateOrConnectWithoutUserInput = {
    where: JournalingWhereUniqueInput
    create: XOR<JournalingCreateWithoutUserInput, JournalingUncheckedCreateWithoutUserInput>
  }

  export type JournalingCreateManyUserInputEnvelope = {
    data: JournalingCreateManyUserInput | JournalingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type userMeditationCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    meditation?: meditationCreateNestedOneWithoutUserMeditationsInput
  }

  export type userMeditationUncheckedCreateWithoutUserInput = {
    id?: number
    meditationId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type userMeditationCreateOrConnectWithoutUserInput = {
    where: userMeditationWhereUniqueInput
    create: XOR<userMeditationCreateWithoutUserInput, userMeditationUncheckedCreateWithoutUserInput>
  }

  export type userMeditationCreateManyUserInputEnvelope = {
    data: userMeditationCreateManyUserInput | userMeditationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SystemLogUpsertWithWhereUniqueWithoutUserInput = {
    where: SystemLogWhereUniqueInput
    update: XOR<SystemLogUpdateWithoutUserInput, SystemLogUncheckedUpdateWithoutUserInput>
    create: XOR<SystemLogCreateWithoutUserInput, SystemLogUncheckedCreateWithoutUserInput>
  }

  export type SystemLogUpdateWithWhereUniqueWithoutUserInput = {
    where: SystemLogWhereUniqueInput
    data: XOR<SystemLogUpdateWithoutUserInput, SystemLogUncheckedUpdateWithoutUserInput>
  }

  export type SystemLogUpdateManyWithWhereWithoutUserInput = {
    where: SystemLogScalarWhereInput
    data: XOR<SystemLogUpdateManyMutationInput, SystemLogUncheckedUpdateManyWithoutUserInput>
  }

  export type SystemLogScalarWhereInput = {
    AND?: SystemLogScalarWhereInput | SystemLogScalarWhereInput[]
    OR?: SystemLogScalarWhereInput[]
    NOT?: SystemLogScalarWhereInput | SystemLogScalarWhereInput[]
    id?: IntFilter<"SystemLog"> | number
    userId?: IntNullableFilter<"SystemLog"> | number | null
    ipAddress?: StringFilter<"SystemLog"> | string
    device?: StringFilter<"SystemLog"> | string
    action?: StringFilter<"SystemLog"> | string
    method?: StringFilter<"SystemLog"> | string
    description?: StringFilter<"SystemLog"> | string
    createdAt?: DateTimeFilter<"SystemLog"> | Date | string
    updatedAt?: DateTimeFilter<"SystemLog"> | Date | string
  }

  export type FaceDetectionUpsertWithWhereUniqueWithoutUserInput = {
    where: FaceDetectionWhereUniqueInput
    update: XOR<FaceDetectionUpdateWithoutUserInput, FaceDetectionUncheckedUpdateWithoutUserInput>
    create: XOR<FaceDetectionCreateWithoutUserInput, FaceDetectionUncheckedCreateWithoutUserInput>
  }

  export type FaceDetectionUpdateWithWhereUniqueWithoutUserInput = {
    where: FaceDetectionWhereUniqueInput
    data: XOR<FaceDetectionUpdateWithoutUserInput, FaceDetectionUncheckedUpdateWithoutUserInput>
  }

  export type FaceDetectionUpdateManyWithWhereWithoutUserInput = {
    where: FaceDetectionScalarWhereInput
    data: XOR<FaceDetectionUpdateManyMutationInput, FaceDetectionUncheckedUpdateManyWithoutUserInput>
  }

  export type FaceDetectionScalarWhereInput = {
    AND?: FaceDetectionScalarWhereInput | FaceDetectionScalarWhereInput[]
    OR?: FaceDetectionScalarWhereInput[]
    NOT?: FaceDetectionScalarWhereInput | FaceDetectionScalarWhereInput[]
    detection_id?: IntFilter<"FaceDetection"> | number
    userId?: IntNullableFilter<"FaceDetection"> | number | null
    imageUrl?: StringFilter<"FaceDetection"> | string
    mood?: EnumMoodFilter<"FaceDetection"> | $Enums.Mood
    detectedAt?: DateTimeFilter<"FaceDetection"> | Date | string
    createdAt?: DateTimeFilter<"FaceDetection"> | Date | string
    updatedAt?: DateTimeFilter<"FaceDetection"> | Date | string
  }

  export type JournalingUpsertWithWhereUniqueWithoutUserInput = {
    where: JournalingWhereUniqueInput
    update: XOR<JournalingUpdateWithoutUserInput, JournalingUncheckedUpdateWithoutUserInput>
    create: XOR<JournalingCreateWithoutUserInput, JournalingUncheckedCreateWithoutUserInput>
  }

  export type JournalingUpdateWithWhereUniqueWithoutUserInput = {
    where: JournalingWhereUniqueInput
    data: XOR<JournalingUpdateWithoutUserInput, JournalingUncheckedUpdateWithoutUserInput>
  }

  export type JournalingUpdateManyWithWhereWithoutUserInput = {
    where: JournalingScalarWhereInput
    data: XOR<JournalingUpdateManyMutationInput, JournalingUncheckedUpdateManyWithoutUserInput>
  }

  export type JournalingScalarWhereInput = {
    AND?: JournalingScalarWhereInput | JournalingScalarWhereInput[]
    OR?: JournalingScalarWhereInput[]
    NOT?: JournalingScalarWhereInput | JournalingScalarWhereInput[]
    journal_id?: IntFilter<"Journaling"> | number
    userId?: IntNullableFilter<"Journaling"> | number | null
    title?: StringFilter<"Journaling"> | string
    content?: StringFilter<"Journaling"> | string
    mood?: EnumMoodFilter<"Journaling"> | $Enums.Mood
    createdAt?: DateTimeFilter<"Journaling"> | Date | string
    updatedAt?: DateTimeFilter<"Journaling"> | Date | string
  }

  export type userMeditationUpsertWithWhereUniqueWithoutUserInput = {
    where: userMeditationWhereUniqueInput
    update: XOR<userMeditationUpdateWithoutUserInput, userMeditationUncheckedUpdateWithoutUserInput>
    create: XOR<userMeditationCreateWithoutUserInput, userMeditationUncheckedCreateWithoutUserInput>
  }

  export type userMeditationUpdateWithWhereUniqueWithoutUserInput = {
    where: userMeditationWhereUniqueInput
    data: XOR<userMeditationUpdateWithoutUserInput, userMeditationUncheckedUpdateWithoutUserInput>
  }

  export type userMeditationUpdateManyWithWhereWithoutUserInput = {
    where: userMeditationScalarWhereInput
    data: XOR<userMeditationUpdateManyMutationInput, userMeditationUncheckedUpdateManyWithoutUserInput>
  }

  export type userMeditationScalarWhereInput = {
    AND?: userMeditationScalarWhereInput | userMeditationScalarWhereInput[]
    OR?: userMeditationScalarWhereInput[]
    NOT?: userMeditationScalarWhereInput | userMeditationScalarWhereInput[]
    id?: IntFilter<"userMeditation"> | number
    userId?: IntNullableFilter<"userMeditation"> | number | null
    meditationId?: IntNullableFilter<"userMeditation"> | number | null
    createdAt?: DateTimeFilter<"userMeditation"> | Date | string
    updatedAt?: DateTimeFilter<"userMeditation"> | Date | string
  }

  export type UserCreateWithoutLoginsInput = {
    first_name: string
    last_name: string
    email: string
    phone_number: string
    password: string
    created_at?: Date | string
    verifiedAt?: Date | string | null
    updated_at?: Date | string
    detections?: FaceDetectionCreateNestedManyWithoutUserInput
    journals?: JournalingCreateNestedManyWithoutUserInput
    userMeditations?: userMeditationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLoginsInput = {
    user_id?: number
    first_name: string
    last_name: string
    email: string
    phone_number: string
    password: string
    created_at?: Date | string
    verifiedAt?: Date | string | null
    updated_at?: Date | string
    detections?: FaceDetectionUncheckedCreateNestedManyWithoutUserInput
    journals?: JournalingUncheckedCreateNestedManyWithoutUserInput
    userMeditations?: userMeditationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLoginsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLoginsInput, UserUncheckedCreateWithoutLoginsInput>
  }

  export type UserUpsertWithoutLoginsInput = {
    update: XOR<UserUpdateWithoutLoginsInput, UserUncheckedUpdateWithoutLoginsInput>
    create: XOR<UserCreateWithoutLoginsInput, UserUncheckedCreateWithoutLoginsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLoginsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLoginsInput, UserUncheckedUpdateWithoutLoginsInput>
  }

  export type UserUpdateWithoutLoginsInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    detections?: FaceDetectionUpdateManyWithoutUserNestedInput
    journals?: JournalingUpdateManyWithoutUserNestedInput
    userMeditations?: userMeditationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLoginsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    detections?: FaceDetectionUncheckedUpdateManyWithoutUserNestedInput
    journals?: JournalingUncheckedUpdateManyWithoutUserNestedInput
    userMeditations?: userMeditationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutDetectionsInput = {
    first_name: string
    last_name: string
    email: string
    phone_number: string
    password: string
    created_at?: Date | string
    verifiedAt?: Date | string | null
    updated_at?: Date | string
    logins?: SystemLogCreateNestedManyWithoutUserInput
    journals?: JournalingCreateNestedManyWithoutUserInput
    userMeditations?: userMeditationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDetectionsInput = {
    user_id?: number
    first_name: string
    last_name: string
    email: string
    phone_number: string
    password: string
    created_at?: Date | string
    verifiedAt?: Date | string | null
    updated_at?: Date | string
    logins?: SystemLogUncheckedCreateNestedManyWithoutUserInput
    journals?: JournalingUncheckedCreateNestedManyWithoutUserInput
    userMeditations?: userMeditationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDetectionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDetectionsInput, UserUncheckedCreateWithoutDetectionsInput>
  }

  export type UserUpsertWithoutDetectionsInput = {
    update: XOR<UserUpdateWithoutDetectionsInput, UserUncheckedUpdateWithoutDetectionsInput>
    create: XOR<UserCreateWithoutDetectionsInput, UserUncheckedCreateWithoutDetectionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDetectionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDetectionsInput, UserUncheckedUpdateWithoutDetectionsInput>
  }

  export type UserUpdateWithoutDetectionsInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    logins?: SystemLogUpdateManyWithoutUserNestedInput
    journals?: JournalingUpdateManyWithoutUserNestedInput
    userMeditations?: userMeditationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDetectionsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    logins?: SystemLogUncheckedUpdateManyWithoutUserNestedInput
    journals?: JournalingUncheckedUpdateManyWithoutUserNestedInput
    userMeditations?: userMeditationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutJournalsInput = {
    first_name: string
    last_name: string
    email: string
    phone_number: string
    password: string
    created_at?: Date | string
    verifiedAt?: Date | string | null
    updated_at?: Date | string
    logins?: SystemLogCreateNestedManyWithoutUserInput
    detections?: FaceDetectionCreateNestedManyWithoutUserInput
    userMeditations?: userMeditationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutJournalsInput = {
    user_id?: number
    first_name: string
    last_name: string
    email: string
    phone_number: string
    password: string
    created_at?: Date | string
    verifiedAt?: Date | string | null
    updated_at?: Date | string
    logins?: SystemLogUncheckedCreateNestedManyWithoutUserInput
    detections?: FaceDetectionUncheckedCreateNestedManyWithoutUserInput
    userMeditations?: userMeditationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutJournalsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutJournalsInput, UserUncheckedCreateWithoutJournalsInput>
  }

  export type UserUpsertWithoutJournalsInput = {
    update: XOR<UserUpdateWithoutJournalsInput, UserUncheckedUpdateWithoutJournalsInput>
    create: XOR<UserCreateWithoutJournalsInput, UserUncheckedCreateWithoutJournalsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutJournalsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutJournalsInput, UserUncheckedUpdateWithoutJournalsInput>
  }

  export type UserUpdateWithoutJournalsInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    logins?: SystemLogUpdateManyWithoutUserNestedInput
    detections?: FaceDetectionUpdateManyWithoutUserNestedInput
    userMeditations?: userMeditationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutJournalsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    logins?: SystemLogUncheckedUpdateManyWithoutUserNestedInput
    detections?: FaceDetectionUncheckedUpdateManyWithoutUserNestedInput
    userMeditations?: userMeditationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userMeditationCreateWithoutMeditationInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutUserMeditationsInput
  }

  export type userMeditationUncheckedCreateWithoutMeditationInput = {
    id?: number
    userId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type userMeditationCreateOrConnectWithoutMeditationInput = {
    where: userMeditationWhereUniqueInput
    create: XOR<userMeditationCreateWithoutMeditationInput, userMeditationUncheckedCreateWithoutMeditationInput>
  }

  export type userMeditationCreateManyMeditationInputEnvelope = {
    data: userMeditationCreateManyMeditationInput | userMeditationCreateManyMeditationInput[]
    skipDuplicates?: boolean
  }

  export type userMeditationUpsertWithWhereUniqueWithoutMeditationInput = {
    where: userMeditationWhereUniqueInput
    update: XOR<userMeditationUpdateWithoutMeditationInput, userMeditationUncheckedUpdateWithoutMeditationInput>
    create: XOR<userMeditationCreateWithoutMeditationInput, userMeditationUncheckedCreateWithoutMeditationInput>
  }

  export type userMeditationUpdateWithWhereUniqueWithoutMeditationInput = {
    where: userMeditationWhereUniqueInput
    data: XOR<userMeditationUpdateWithoutMeditationInput, userMeditationUncheckedUpdateWithoutMeditationInput>
  }

  export type userMeditationUpdateManyWithWhereWithoutMeditationInput = {
    where: userMeditationScalarWhereInput
    data: XOR<userMeditationUpdateManyMutationInput, userMeditationUncheckedUpdateManyWithoutMeditationInput>
  }

  export type UserCreateWithoutUserMeditationsInput = {
    first_name: string
    last_name: string
    email: string
    phone_number: string
    password: string
    created_at?: Date | string
    verifiedAt?: Date | string | null
    updated_at?: Date | string
    logins?: SystemLogCreateNestedManyWithoutUserInput
    detections?: FaceDetectionCreateNestedManyWithoutUserInput
    journals?: JournalingCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserMeditationsInput = {
    user_id?: number
    first_name: string
    last_name: string
    email: string
    phone_number: string
    password: string
    created_at?: Date | string
    verifiedAt?: Date | string | null
    updated_at?: Date | string
    logins?: SystemLogUncheckedCreateNestedManyWithoutUserInput
    detections?: FaceDetectionUncheckedCreateNestedManyWithoutUserInput
    journals?: JournalingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserMeditationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserMeditationsInput, UserUncheckedCreateWithoutUserMeditationsInput>
  }

  export type meditationCreateWithoutUserMeditationsInput = {
    title: string
    description: string
    mediaUrl: string
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type meditationUncheckedCreateWithoutUserMeditationsInput = {
    meditation_id?: number
    title: string
    description: string
    mediaUrl: string
    duration: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type meditationCreateOrConnectWithoutUserMeditationsInput = {
    where: meditationWhereUniqueInput
    create: XOR<meditationCreateWithoutUserMeditationsInput, meditationUncheckedCreateWithoutUserMeditationsInput>
  }

  export type UserUpsertWithoutUserMeditationsInput = {
    update: XOR<UserUpdateWithoutUserMeditationsInput, UserUncheckedUpdateWithoutUserMeditationsInput>
    create: XOR<UserCreateWithoutUserMeditationsInput, UserUncheckedCreateWithoutUserMeditationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserMeditationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserMeditationsInput, UserUncheckedUpdateWithoutUserMeditationsInput>
  }

  export type UserUpdateWithoutUserMeditationsInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    logins?: SystemLogUpdateManyWithoutUserNestedInput
    detections?: FaceDetectionUpdateManyWithoutUserNestedInput
    journals?: JournalingUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserMeditationsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    logins?: SystemLogUncheckedUpdateManyWithoutUserNestedInput
    detections?: FaceDetectionUncheckedUpdateManyWithoutUserNestedInput
    journals?: JournalingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type meditationUpsertWithoutUserMeditationsInput = {
    update: XOR<meditationUpdateWithoutUserMeditationsInput, meditationUncheckedUpdateWithoutUserMeditationsInput>
    create: XOR<meditationCreateWithoutUserMeditationsInput, meditationUncheckedCreateWithoutUserMeditationsInput>
    where?: meditationWhereInput
  }

  export type meditationUpdateToOneWithWhereWithoutUserMeditationsInput = {
    where?: meditationWhereInput
    data: XOR<meditationUpdateWithoutUserMeditationsInput, meditationUncheckedUpdateWithoutUserMeditationsInput>
  }

  export type meditationUpdateWithoutUserMeditationsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    mediaUrl?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type meditationUncheckedUpdateWithoutUserMeditationsInput = {
    meditation_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    mediaUrl?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemLogCreateManyUserInput = {
    id?: number
    ipAddress: string
    device: string
    action: string
    method: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FaceDetectionCreateManyUserInput = {
    detection_id?: number
    imageUrl: string
    mood?: $Enums.Mood
    detectedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JournalingCreateManyUserInput = {
    journal_id?: number
    title: string
    content: string
    mood?: $Enums.Mood
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type userMeditationCreateManyUserInput = {
    id?: number
    meditationId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemLogUpdateWithoutUserInput = {
    ipAddress?: StringFieldUpdateOperationsInput | string
    device?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemLogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    ipAddress?: StringFieldUpdateOperationsInput | string
    device?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemLogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    ipAddress?: StringFieldUpdateOperationsInput | string
    device?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FaceDetectionUpdateWithoutUserInput = {
    imageUrl?: StringFieldUpdateOperationsInput | string
    mood?: EnumMoodFieldUpdateOperationsInput | $Enums.Mood
    detectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FaceDetectionUncheckedUpdateWithoutUserInput = {
    detection_id?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    mood?: EnumMoodFieldUpdateOperationsInput | $Enums.Mood
    detectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FaceDetectionUncheckedUpdateManyWithoutUserInput = {
    detection_id?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    mood?: EnumMoodFieldUpdateOperationsInput | $Enums.Mood
    detectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JournalingUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mood?: EnumMoodFieldUpdateOperationsInput | $Enums.Mood
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JournalingUncheckedUpdateWithoutUserInput = {
    journal_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mood?: EnumMoodFieldUpdateOperationsInput | $Enums.Mood
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JournalingUncheckedUpdateManyWithoutUserInput = {
    journal_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    mood?: EnumMoodFieldUpdateOperationsInput | $Enums.Mood
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userMeditationUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meditation?: meditationUpdateOneWithoutUserMeditationsNestedInput
  }

  export type userMeditationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    meditationId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userMeditationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    meditationId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userMeditationCreateManyMeditationInput = {
    id?: number
    userId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type userMeditationUpdateWithoutMeditationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutUserMeditationsNestedInput
  }

  export type userMeditationUncheckedUpdateWithoutMeditationInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userMeditationUncheckedUpdateManyWithoutMeditationInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}